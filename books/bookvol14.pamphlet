\documentclass[dvipdfm]{book}
\newcommand{\VolumeName}{Volume 14: Algorithms}
\usepackage{bbold}
\usepackage{scrextend}
\input{bookheader.tex}
\mainmatter
\setcounter{chapter}{0} % Chapter 1

\begin{chunk}{Geddes}
)abbrev package GEDDES Geddes
++ Author: Mark Botch
++ Date Created: 2014
++ Description:
++ These are Axiom implementation of algorithms from [Geddes 92]
Geddes(): Exports == Implementation where
 EEA ==> Record(gcd:Integer,s:Integer,t:Integer)
 Exports ==> with
 
  Euclid: (Integer,Integer) -> Integer
    ++ Euclid algorithm from [Geddes 92], p 34
  ExtendedEuclidean: (Integer,Integer) -> EEA
    ++ Extended Euclidean algorithm from [Geddes 92], p 36

 Implementation ==> add

\getchunk{Geddes:Euclid}
\getchunk{Geddes:ExtendedEuclidean}

\end{chunk}
\chapter{Euclidean Algorithm}

\cite{Gedd92} p 34\\
{\bf procedure} Euclid($a$,$b$)
\begin{addmargin}{1em}
-- Compute $g=\textrm{GCD}(a,b)$, where $a$ and $b$\\
-- are from a Euclidean domain D\\
$c \leftarrow n(a);\quad d \leftarrow n(b)$\\
{\bf while} $d \ne 0$ {\bf do}\{
\begin{addmargin}{1em}
$r \leftarrow \textrm{rem}(c,d)$\\
$c \leftarrow d$\\
$d \leftarrow r$\}
\end{addmargin}
$g \leftarrow n(c)$\\
{\bf return}(g)
\end{addmargin}
{\bf end}

\subsection{Geddes:Euclid}
\begin{chunk}{Geddes:Euclid}
  Euclid(a:Integer,b:Integer):Integer ==
    c:Integer:=unitCanonical(a)
    d:Integer:=unitCanonical(b)
    while d ~= 0 repeat
      r:Integer:= c rem d
      c:=d
      d:=r
    c

\end{chunk}

\subsection{Background}

The Euclidean GCD function tries to compute the largest number that
divides both arguments. This isn't unique since $30=5\times 6=-5\times -6$.
To make it unique we define a unit (essentially the sign in the Integer).
When we extract the sign then $\{6, -6\}$ are essentially the same and
are called ``associates''. 

Having put the associates together we pick one by rule and call it the
canonical element. The rule for the Integers is to take the absolute
value so 6 is the canonical element for the associates $\{6, -6\}$.
We call this function {\bf unitCanonical} although it is simply
the absolute value function in the domain Integer. Indeed, in 
{\bf Volume 10.3: Domains} we find this line in the domain {\bf Integer}:
\begin{verbatim}
      unitCanonical x == abs x
\end{verbatim}

\subsection{Example}

Euclid's algorithm collects the largest set of common factors. So for
18 and 30 we see:
\[18 = 2 \times 3 \times 3\]
and
\[30 = 2 \times 3 \times 5\]
and the common set of factors is
\[ 6 = 2 \times 3 \]

Rather than factor the numbers it is more efficient to divide the
two numbers which will yield a quotient and a remainder. So
in this case:
\begin{verbatim}
c:=18
d:=30
  r:= c rem d -> 18 rem 30 -> 18
  c:= 30
  d:= 18
  r:= c rem d -> 30 rem 18 -> 12
  c:= 18
  d:= 12
  r:= c rem d -> 18 rem 12 -> 6
  c:= 12
  d:= 6
  r:= c rem d -> 12 rem 6 -> 0
  c:= 6
  d:= 0
result is c -> 6
\end{verbatim}

Since the quotient and remainder will share the same common factors
as the original numbers we can continue this division loop until
the result of the remainder is 0. If the only factor in common is 1
then the numbers are called ``relatively prime''. Otherwise, as
above, we end up with the largest number composed of the common factors.

\chapter{Extended Euclidean}

\cite{Gedd92} p 36\\
{\bf procedure} ExtendedEuclidean$(a,b; s,t)$
\begin{addmargin}{1em}
-- Given $a$ and $b$ in a Euclidean domain D, compute\\
-- $g = \textrm{GCD}(a,b)$ and also compute elements $s,t \in D$\\
-- such that $g=sa+tb$\\
$c \leftarrow n(a); d \leftarrow n(b)$\\
$c_1 \leftarrow 1; d_1 \leftarrow 0$\\
$c_2 \leftarrow 0; d_2 \leftarrow 1$\\
{\bf while} $d \ne 0$ {\bf do} \{
\begin{addmargin}{1em}
$q \leftarrow \textrm{quo}(c,d);\quad r \leftarrow c-q\cdot d$\\
$r_1 \leftarrow c_1-q\cdot d_1;\quad r_2 \leftarrow c_2-q\cdot d_2$\\
$c \leftarrow d; \quad c_1 \leftarrow d_1;\quad c_2 \leftarrow d_2$\\
$d \leftarrow r; \quad d_1 \leftarrow r_1;\quad d_2 \leftarrow r_2$ \}
\end{addmargin}
; Normalize GCD\\
$g \leftarrow n(c)$\\
$s \leftarrow c_1 / (u(a)\cdot u(c)); t \leftarrow c_2 / (u(b)\cdot u(c))$\\
{\bf return}(g)
\end{addmargin}
{\bf end}

\subsection{Geddes:ExtendedEuclidean}
\begin{chunk}{Geddes:ExtendedEuclidean}
  ExtendedEuclidean(a:Integer,b:Integer):EEA ==
    c:Integer:=unitCanonical(a)
    d:Integer:=unitCanonical(b)
    c1:Integer:=1
    d1:Integer:=0
    c2:Integer:=0
    d2:Integer:=1
    while d ~= 0 repeat
      q:Integer:= c quo d
      r:Integer:= c-q*d
      r1:Integer:= c1-q*d1
      r2:Integer:= c2-q*d2
      c  := d
      c1 := d1
      c2 := d2
      d  := r
      d1 := r1
      d2 := r2
    t1:Integer:= unitCanonical(c)
    t2:Integer:= c1 quo (unitNormal(a).unit*unitNormal(c).unit)
    t3:Integer:= c2 quo (unitNormal(b).unit*unitNormal(c).unit)
    [t1,t2,t3]
      

\end{chunk}

\subsection{Background}

Since we are doing simple assignments the ExtendedEuclidean
algorithm simply computes the $s$ and $t$ coefficients such that
a result $g=\textrm{GCD}(a,b)$ can be expressed as a linear 
combination of elements. So
\[t1:=\textrm{ExtendedEuclidean}(18,30) 
{\rm\ yields\ } [\textrm{gcd}= 6,s= 2,t= - 1]\]
and
\[ g = s\times a + t\times b -> 6 = 2\times 18 + (-1)\times 30 \]

Here we introduce two functions, {\bf quo} and {\bf unitNormal}.

The {\bf quo} function is defined in {\bf Volume 10.2: Domains} in
the domain {\bf Integer} as
\begin{verbatim}
   x quo y == QUOTIENT2(x,y)$Lisp
\end{verbatim}
which resolves to the Lisp function in {\bf Volume 5: Interpreter}
\begin{verbatim}
   (defun quotient2 (x y)
     (values (truncate x y)))
\end{verbatim}
which will return the integer portion of an integer division,
ignoring the fractional portion.

The {\bf unitNormal} function in {\bf Volume 10.2: Categories}
in the category {\bf IntegralDomain} returns a portion of a Record.
The Record is defined as:
\begin{verbatim}
   Record(unit:%,canonical:%,associate:%)
\end{verbatim}
holding three pieces of information, the unit, the canonical element,
and the set of associates. We only need the unit information so we
access the record structure using the unit selector thus:
\begin{verbatim}
   resultRecord.unit
\end{verbatim}

The actual definition of {\bf unitNormal} used here comes from 
{\bf Volume 10.3: Domains} in domain {\bf Integer} which defines it as
\begin{verbatim}
   UCA ==> Record(unit:%,canonical:%,associate:%)
   unitNormal x ==
     x < 0 => [-1,-x,-1]$UCA
     [1,x,1]$UCA
\end{verbatim}
which for the value $-6$ would resolve to 
\begin{verbatim}
   [unit= - 1,canonical= 6,associate= - 1]
\end{verbatim}
giving
\begin{verbatim}
   unitNormal(-6).unit -> -1
\end{verbatim}
and, as above, the {\bf unitCanonical} function is just the absolute
value.

We use the {\bf quo} operation at the final step rather than division.
Integer is not a Field so the operation isn't available. The division
operator would come from the domain {\bf Fraction(Integer)} with the
signature
\begin{verbatim}
   ?/? : (Integer,Integer) -> %
\end{verbatim}
which takes two integers and returns an element of Fraction(Integer)
which is not what we want at the result. We know that the Integer
unit can only be $\pm 1$ so we use the {\bf quo} operation from
{\bf Integer}  to form the quotient we need, with the signature
\begin{verbatim}
   ?quo? : (%,%) -> % 
\end{verbatim}

\subsection{Example}
\begin{verbatim}
ExtendedEuclidean(18,30)
  c   d  c1  d1  c2  d2   q   r  r1  r2   c   c1  c2   d  d1  d2
 18  30   1   0   0   1   0  18   1   0   30   0   1  18   1   0
                          1  12  -1   1   18   1   0  12  -1   1
                          1   6   2  -1   12  -1   1   6   2  -1
                          2   0  -5   3    6   2  -1   0  -5   3
 unitNormal(a) -> unitNormal(18) -> 1
 unitNormal(b) -> unitNormal(30) -> 1
 unitNormal(c) -> unitNormal(6) -> 1
 t1:=unitCanonical(c) -> unitCanonical(6) -> 6
 t2:=c1 quo (unitNormal(a).unit*unitNormal(c).unit) -> 2/1 -> 2
 t3:Integer:= c2 quo (unitNormal(b).unit*unitNormal(c).unit) -> -1/1 -> -1
 [gcd= 6,s= 2,t= - 1]
\end{verbatim}


\chapter{Primitive Euclidean}

\cite{Gedd92} p 57\\
{\bf procedure} PrimitiveEuclidean$(a(x),b(x))$
\begin{addmargin}{1em}
-- Given polynomials $a(x), b(x) \in D[x]$\\
-- where D is a UFD, we compute\\
-- $g(x)=\textrm{GCD}(a(x),b(x))$\\
$c(x) \leftarrow \textrm{pp}(a(x));\quad d(x) \leftarrow \textrm{pp}(b(x))$\\
{\bf while} $d(x) \ne 0$ {\bf do} \{
\begin{addmargin}{1em}
$r(x) \leftarrow \textrm{prem}(c(x),d(x))$\\
$c(x) \leftarrow d(x)$\\
$d(x) \leftarrow \textrm{pp}(r(x))$ \}
\end{addmargin}
$\gamma \leftarrow \textrm{GCD}(\textrm{cont}(a(x)),\textrm{cont}(b(x)))$\\
$g(x) \leftarrow \gamma c(x)$\\
{\bf return}($g(x)$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Multiprecision Integer Multiplication}

\cite{Gedd92} p 113\\
{\bf procedure} BigIntegerMultiply($a$,$b$,$B$)
\begin{addmargin}{1em}
-- Given two multiprecision integers $a$ and $b$ of\\
-- lengths $m$ and $n$ with base $B$, we determine\\
-- $c=a\cdot b = c_0+c_1B+\cdots+c_{m+n-1}B^{m+n-1}$\\
{\bf for} $i$ {\bf from} 0 {\bf to} $m-1$ {\bf do} $c_i \leftarrow 0$\\
{\bf for} $k$ {\bf from} 0 {\bf to} $n-1$ {\bf do} \{
\begin{addmargin}{1em}
$carry \leftarrow 0$\\
{\bf for} $i$ {\bf from} 0 {\bf to} $m-1$ {\bf do} \{
\begin{addmargin}{1em}
$temp \leftarrow a_i\cdot b_k + c_{i+k} + carry$\\
$c_{i+k} \leftarrow \textrm{rem}(temp,B)$\\
$carry \leftarrow \textrm{quo}(temp,B)$
\end{addmargin}
$c_{k+m} \leftarrow carry$ \}
\end{addmargin}
{\bf return}$(c_0+c_1B+\cdots+c_{m+n-1}B^{m+n-1})$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Karatsuba's Multiplication}

\cite{Gedd92} p 113\\
{\bf procedure} Karatsuba$(a,b,n)$
\begin{addmargin}{1em}
-- Given multiprecision integers $a$ and $b$ with $n$ digits\\
-- and base $B$ we compute their product $c=a\cdot b$\\
-- The size $n$ must be a power of 2\\
{\bf if} $n=1$ {\bf then return}$(a\cdot b)$\\
{\bf else} \{
\begin{addmargin}{1em}
$c \leftarrow \textrm{sign}(a) \cdot \textrm{sign}(b)$\\
$d \leftarrow |a|; \quad b^\prime \leftarrow |b|$\\
$a_1 \leftarrow \textrm{first } n/2 \textrm{ digits of } d$\\
$a_2 \leftarrow \textrm{last } n/2 \textrm{ digits of } d$\\
$b_1 \leftarrow \textrm{first } \textrm{ digits of } b^\prime$\\
$b_2 \leftarrow \textrm{last } n/2 \textrm{ digits of } b^\prime$\\
$m1 \leftarrow \textrm{Karatsuba}(a1,b1,n/2)$\\
$m2 \leftarrow \textrm{Karatsuba}(a1-a2,b2-b1,n/2)$\\
$m3 \leftarrow \textrm{Karatsuba}(a2,b2,n/2)$\\
$c \leftarrow c\cdot (m1\cdot B^n+(m1+m2+m3)\cdot B^{n/2}+m3)$\\
{\bf return}$(c)$ \}
\end{addmargin}
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Polynomial Trial Division}

\cite{Gedd92} p 122\\
{\bf procedure} TrialDivision$(a(x),b(x),m,n)$
\begin{addmargin}{1em}
-- Given two polynomials $a(x)$ and $b(x)$ with degrees $m$ and $n$ with\\
-- $m \ge n$, determine if $b()$ divides into $a(x)$ by trial division at the\\
-- points $x_0,\ldots,x_m$. If true then return the quotient $c(x)$\\
{\bf for} i {\bf from} 0 {\bf to} m {\bf do} $\xi_i=a(x_i)/b(x_i)$\\
$c(x) \leftarrow \textrm{PolyInterp}(\xi_0,\ldots,\xi_m)$\\
{\bf if} $\textrm{deg}(c(x))=m-n$ {\bf then return}$(c(x))$\\
{\bf else return}({\sl does not divide})
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Fast Fourier Transform}

\cite{Gedd92} p 128\\
{\bf procedure} FFT$(N,\varpi,a(x))$
\begin{addmargin}{1em}
-- Given $N$, a power of 2, $\varpi$ a primitive $N$-th root of\\
-- unity and $a(x)$ a polynomial of degree $\le N-1$, we calculate\\
-- the $N$ components of the Fourier transform of $a(x)$
{\bf if} $N=1$ {\bf then} $A_0 \leftarrow a_0$\\
{\bf else} \{\\
\begin{addmargin}{1em}
$\displaystyle{}b(x)\leftarrow \sum_{i=0}^{N/2-1} a_{2i}\cdot x^i; \quad
\quad c(x) \leftarrow \sum_{i=0}^{N/2-1} a_{2i+1}\cdot x^i$\\
$B \leftarrow \textrm{FFT}(N/2,\omega^2,b(x));$\quad
$C \leftarrow\textrm{FFT}(N/2,\omega^2,c(x))$\\
{\bf for} $i$ {\bf from} 0 {\bf to} $N/2-1$ {\bf do} \{
\begin{addmargin}{1em}
$A_i \leftarrow B_i+\omega^i \cdot C_i$\\
$A_{N/2+i} \leftarrow B_i-\omega^i \cdot C_i$ \}\}
\end{addmargin}
\end{addmargin}
{\bf return}($(A_0,A_1,\cdots,A_{N-1})$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Fast Fourier Polynomial Multiplication}

\cite{Gedd92} p 132\\
{\bf procedure} FFTMultiply$(a(x),b(x),m,n)$
\begin{addmargin}{1em}
-- Given polynomials $a(x)$ and $b(x)$ of degree $m$ and $n$\\
-- calculate $c(x)=a(x)\cdot b(x)$ using FFTs\\
$N \leftarrow $ first power of 2 greater than $m+n$\\
$\omega \leftarrow $ primitive $N$-th root of unity\\
$A \leftarrow \textrm{FFT}(N,\omega,a(x))$\\
$B \leftarrow \textrm{FFT}(N,\omega,b(x))$\\
{\bf for} $i$ {\bf from} 0 {\bf to} $N-1$ {\bf do} $C_i=A_i\cdot B_i$\\
$c \leftarrow N^{-1}\cdot \textrm{FFT}(N,\omega^{-1},C(x))$\\
$c(x) \leftarrow \sum_{i=0}^{N-1} c_ix^i$\\
{\bf return}($c(x)$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Newton's Method for Power Series Inversion}

\cite{Gedd92} p 140\\
{\bf procedure} FastNewtonInversion$(a(x),n)$\\
\begin{addmargin}{1em}
-- Given a power series $a(x)$ in $x$ with $a(0) = a_0 \ne 0$\\
-- find the first $2^n$ terms of the power series $1/a(x)$.\\
$y \leftarrow 1/a_0$\\
{\bf for} $k$ {\bf from} 0 {\bf to} $n-1$ {\bf do}
\begin{addmargin}{1em}
$y \leftarrow y\cdot (2-y\cdot a(x)) \textrm{ mod } x^{2^{k+1}}$
\end{addmargin}
{\bf return}($y$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Newton's Method for Solving $P(y)=0$}
\cite{Gedd92} p 144\\
{\bf procedure} NewtonSolve$(P(y),y_0,n)$
\begin{addmargin}{1em}
-- Given $P(y) \in \textrm{F}[[x]][y]$, and a point $y_0$ satisfying\\
-- $P(y_0)=0 \textrm{ mod }x$ and $P^\prime(y_0) \ne 0$, we determine the\\
-- first $2^n$ terms of a solution to $P(y)=0$ via Newton's method\\
$y \leftarrow y_0$\\
{\bf for} $k$ {\bf from} 0 {\bf to} $n-1$ {\bf do}
\begin{addmargin}{1em}
$y \leftarrow y-(P(y)\cdot P^\prime(y)^-1\textrm{ mod }x^{2^{k+1}}$
\end{addmargin}
{\bf return}$(y)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Garner's Chinese Remainder}
\cite{Gedd92} p 180\\
{\bf procedure} IntegerCRA$((m_0,\ldots,m_n),(u_0,\ldots,u_n))$\\
\begin{addmargin}{1em}
 -- Given positive moduli $m_i \in {\bf Z} (0 \le i \le n)$ which are pairwise\\
 -- relatively prime and given corresponding residues $u_i \in {\bf Z}_{m_i}$\\
 -- computing the unique integer $u \in {\bf Z}_m$ (where $m=\prod m_i$) such\\
 -- that $u \equiv u_i (\textrm{mod }m_i), i=0,1,\ldots,n$  

-- Step 1: Compute the required inverses using a procedure\\
-- \quad\quad reciprocal$(a,q)$ which computes $a^{-1}(\textrm{mod }q)$\\
{\bf for} $k$ {\bf from} 1 {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em}
$product \leftarrow \phi_{m_k}(m_0)$\\
{\bf for} $i$ {\bf from} 1 {\bf to} $k-1$ {\bf do}
\begin{addmargin}{1em}
$product \leftarrow \phi_{m_k}(product\cdot m_i)$
\end{addmargin}
$\gamma \leftarrow \textrm{reciprocal}(product,m_k)$ \}
\end{addmargin}

-- Step 2: Compute the mixed radix coeffs \{$v_k$\}\\
$v_0 \leftarrow u_0$\\
{\bf for} $k$ {\bf from} 1 {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em}
$temp \leftarrow v_{k-1}$\\
{\bf for} $j$ {\bf from} $k-2$ {\bf to} 0 {\bf by} -1 {\bf do} 
\begin{addmargin}{1em}
$temp \leftarrow \phi_{m_k}(temp\cdot m_j+v_j)$
\end{addmargin}
$v_k \leftarrow \phi_{m_k}((u_k-temp)\cdot \gamma_k)$ \}
\end{addmargin}

-- Step 3: Convert from mixed radix representation\\
-- to standard representation\\
$u \leftarrow v_n$\\
{\bf for} $k$ {\bf from} $n-1$ {\bf to} 0 {\bf by} -1 {\bf do}
\begin{addmargin}{1em}
$u \leftarrow u\cdot m_k+v_k$
\end{addmargin}
{\bf return}$(u)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Newton Interpolation}
\cite{Gedd92} p 188\\
{\bf procedure} NewtonInterp$((\alpha_0,\ldots,\alpha_v)(u_0,\ldots,u_v))$
\begin{addmargin}{1em}
-- Let $D={\bf Z}_p[y]$ denote a domain of polynomials in $v \ge 0$\\
-- indeterminates $y=(y_1,\ldots,y_v)$ over a finite field ${\bf Z}_p$\\
-- ($D={\bf Z}_p$ in case $v=0$). Given distinct evaluation points
$\alpha_i \in {\bf Z}_p$\\
-- $(0 \le i \le n)$ and given corresponding values 
$u_i \in D (0 \le i \le n)$\\
-- compute the unique polynomial $u(x) \in D[x]$ such that 
deg$(u(x)) \le n$\\
-- and $u(\alpha_i)=u_i, i=0,1,\ldots,n$

-- Step 1: Compute the required inverses using a procedure\\
--\quad\quad reciprocal$(a,q)$ which computes $a^{-1}(\textrm{mod }q)$\\
{\bf for} $k$ {\bf from} 1 {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em}
$product \leftarrow \phi_p(\alpha_k-\alpha_0)$\\
{\bf for} $i$ {\bf from} 1 {\bf to} $k-1$ {\bf do}
\begin{addmargin}{1em}
$product \leftarrow \phi_p(product \cdot (\alpha_k-\alpha_i))$
\end{addmargin}
$\gamma_k \leftarrow \textrm{reciprocal}(product,p)$ \}
\end{addmargin}
-- Step 2: Compute the Newton coefficients \{$v_k$\}\\
$v_0 \leftarrow u_0$\\
{\bf for} $k$ {\bf from} 1 {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em}
$temp \leftarrow v_{k-1}$\\
{\bf for} $j$ {\bf from} $k-2$ {\bf to} 0 {\bf by} -1 do
\begin{addmargin}{1em}
$temp \leftarrow \phi_p(temp \cdot (\alpha_k-\alpha_j)+v_j)$
\end{addmargin}
$v_k \leftarrow \phi_p((u_k-temp)\cdot \gamma_k)$ \}
\end{addmargin}
-- Step 3: Convert from Newton form to standard form\\
$u \leftarrow v_n$\\
{\bf for} $k$ {\bf from} $n-1$ {\bf to} 0 {\bf by} -1 {\bf do}
\begin{addmargin}{1em}
$u \leftarrow \phi_p(u \cdot (x-\alpha_k)+v_k)$
\end{addmargin}
{\bf return}($u(x)$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Univariate Hensel Lifting}
\cite{Gedd92} p 233\\
{\bf procedure} UnivariateHensel$(a,p,u^{(1)},w^{(1)},B,\gamma)$
\begin{addmargin}{1em}
-- INPUT\\
-- (1) A primitive polynomial $a(x) \in {\bf Z}[x]$\\
-- (2) A prime integer $p$ which does not divide lcoeff($a(x)$)\\
-- (3) Two relatively prime polynomials 
$u^{(1)}(x),w^{(1)}(x) \in {\bf Z}_p[x]$ such that\\
--\quad\quad $a(x) \equiv u^{(1)}(x)w^{(1)}(x)(mod p)$\\
-- (4) An integer $B$ which bounds the magnitudes of all integer coefficients\\
--\quad appearing in $a(x)$ and in any of its possible factors with degrees\\
--\quad not exceeding max\{deg($u^{(1)}(x)$),deg($w^{(1)}(x)$)\}\\
-- (5) Optionally, an integer $\gamma \in {\bf Z}$ which is known to be a
multiple of\\
-- \quad lcoeff($u(x)$), where $u(x)$ (see OUTPUT) below) is one of the 
factors of\\
-- \quad $a(x)$ in {\bf Z}[x] to be computed.\\
-- OUTPUT\\
-- (1) If there exist polynomials $u(x),w(x) \in {\bf Z}[x]$ such that\\
-- \quad\quad $a(x)=u(x)w(x) \in {\bf Z}[x]$\\
-- \quad and\\
-- \quad\quad {\bf n}$(u(x))\equiv {\bf n}(u^{(1)}(x)) (\textrm{mod }p)$,
${\bf n}(w(x)) \equiv {\bf n}(w^{(1)}(x))(\textrm{mod }p)$\\
-- \quad where {\bf n} denotes the normalization 
"make the polynomial monic as an\\
-- \quad element of the domain ${\bf Z}_p[x]$", then $u(x)$ and $w(x)$ will
be computed.\\
-- (2) Otherwise, the value returned will signal "no such factorization"\\

-- 1. Define a new polynomial and its modulo $p$ factors\\
$\alpha \leftarrow \textrm{lcoeff}(a(x))$\\
{\bf if} $\gamma$ is undefined {\bf then} $\gamma \leftarrow \alpha$\\
$a(x) \leftarrow \gamma\cdot a(x)$\\
$u^{(1)}(x) \leftarrow \phi_p(\gamma\cdot {\bf n}(u^{(1)}(x)))$\\
$w^{(1)}(x) \leftarrow \phi_p(\alpha\cdot {\bf n}(w^{(1)}(x)))$

-- 2. Apply extended Euclidean algorithm to 
$u^{(1)}(x),w^{(1)}(x) \in {\bf Z}_p[x]$\\
$s(x),t(x) \leftarrow $ polynomials in ${\bf Z}_p[x]$ computed by the extended euclidean algorithm such that\\
\quad\quad $s(x)u^{(1)}(x)+t(x)w^{(1)}(x) \equiv 1 (\textrm{mod } p)$\\

-- 3. Initialization for the iteration\\
$u(x) \leftarrow \textrm{replace\_lc}(u^{(1)}(x),\gamma)$\\
$w(x) \leftarrow \textrm{replace\_lc}(w^{(1)}(x),\alpha)$\\
$e(x) \leftarrow a(x)-u(x)\cdot w(x)$\\
$modulus \leftarrow p$

-- 4. Iterate until either the factorization in ${\bf Z}[x]$ is obtained or\\
-- \quad\quad else the bound on {\sl modulus} is reached.\\
{\bf while} $e(x) \ne 0$ {\bf and} $modulus < 2\cdot B\cdot \gamma$ {\bf do} \{
\begin{addmargin}{1em}
-- 4.1 Solve in the domain ${\bf Z}_p[x]$ the polynomial equation\\
-- \quad\quad 
$\sigma(x)u^{(1)}(x)+\tau(x)w^{(1)}(x) \equiv c(x)(\textrm{mod }p)$\\
-- \quad\quad where $c(x) = e(x)/modulus$\\
$c(x) \leftarrow e(x)/modulus$\\
$\tilde{\sigma}(x) \leftarrow \phi_p(s(x)\cdot c(x))$\\
$\tilde{\tau}(x) \leftarrow \phi_p(t(x)\cdot c(x))$\\
$q(x),r(x) \leftarrow $ polynomials in ${\bf Z}_p[x]$ such that\\
\hspace*{1cm} $\tilde{\sigma}(x) = w^{(1)}(x)q(x)+r(x) \in {\bf Z}_p[x]$\\
$\sigma(x) \leftarrow r(x)$\\
$\tau(x) \leftarrow \phi_p(\tilde{\tau}(x)+q(x)\cdot u^{(1)}(x))$\\

-- 4.2 Update the factors and compute the error\\
$u(x) \leftarrow u(x)+\tau(x)\cdot modulus;$\\
$w(x) \leftarrow w(x)+\sigma(x)\cdot modulus$\\
$e(x) \leftarrow a(x)-u(x)\cdot w(x)$\\
$modulus \leftarrow modulus\cdot p$ \}
\end{addmargin}
-- 5. Check the termination status\\
{\bf if} $e(x)=0$ {\bf then} \{
\begin{addmargin}{1em}
-- factorization obtained - remove contents\\
$\delta \leftarrow \textrm{cont}(u(x))$\\
$u(x) \leftarrow u(x)/\delta$\\
$w(x) \leftarrow w(x)/(\gamma/\delta)$\\
-- Note: $a(x) \leftarrow a(x)/\gamma$
would restore $a(x)$ to its input value \}\\
{\bf return}$(u(x),w(x))$
\end{addmargin}
{\bf else return}({\sl no such factorization exists})
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Multivariate Polynomial Diophantine Equations}
\cite{Gedd92} p 268\\
{\bf procedure} MultivariateDiophant$(a,c,I,d,p,k)$\\
\begin{addmargin}{1em}
-- Solve in the domain ${\bf Z}_{p^k}[x_1,\ldots,x_v]$ the multivariate
polynomial\\
-- diophantine equation\\
--\quad $\sigma_1\times b_1+\cdots+\sigma_r\times b_r 
\equiv c (\textrm{mod }<I^{d+1},p^k>)$\\
-- where, in terms of the given list of polynomials $a_1,\ldots,a_r$,\\
-- the polynomials $b_i, i=1,\ldots,r$, are defined by:\\
--\quad
$b_i=a_1\times\cdots\times a_{i-1}\times a_{i+1}\times\cdots\times a_r$.\\
-- The unique solution $\sigma_i, i=1,\ldots,r$ will be computed such that\\
--\quad degree$(\sigma_i,x_1) < $degree$(a_i,x_1)$\\
--\\
-- Conditions: $p$ must not divide lcoeff($a_i$ mod I),$i=1,\ldots,r$.\\
-- $a_i \textrm{mod }<I,p>,i=1,\ldots,r$ must be pairwise relatively prime\\
-- in ${\bf Z}_p[x_1]$; 
and degree$(c,x_1) <$ sum(degree$(a_i,x_1),i-1,\ldots,r)$\\
--\\
-- INPUT\\
-- (1) A list $a$ of $r > 1$ polynomials in the domain 
${\bf Z}_{p^k}[x_1,\ldots,x_v]$\\
-- (2) A polynomial $c \in {\bf Z}_{p^k}[x_1,\ldots,x_v]$\\
-- (3) $l$, a list of equations 
$[x_2=\alpha_2,x_3=\alpha_3,\ldots,x_v=\alpha_v]$\\
--\quad (possibly null, in which case it is a univariate problem)\\
--\quad representing an evaluation homomorphism;\\
--\quad mathematically, we view it as the ideal\\
--\quad\quad I=$<x_2-\alpha_2,x_3-\alpha_3,\ldots,x_n-\alpha_n>$\\
-- (4) A nonnegative integer $d$ specifying the maximum total degree\\
--\quad with respect to $x_2,\ldots,x_v$ of the desired result\\
-- (5) A prime integer $p$\\
-- (6) A positive integer $k$ specifying that the coefficient arithmetic\\
--\quad is to be performed modulo $p^k$\\
--\\
-- OUTPUT
-- The value returned is the list $\sigma = [\sigma_1,\ldots,\sigma_r]$\\
--\\
-- Remark: The mod operations must use the symmetric representation\\
--\\
-- 1. Initialization\\
$r \leftarrow$ number of polynomials in $a$\\
$v \leftarrow 1 +$ number of equations in $I$\\
$x_v \leftarrow \textrm{lhs}(I_{v-1})$\\
$\alpha_v \leftarrow \textrm{rhs}(I_{v-1})$\\
{\bf if} $v > 1$ {\bf then} \{
\begin{addmargin}{1em} %2
-- 2.1 Multivariate case\\
$A \leftarrow \textrm{product}(a_i,i=1,\ldots,r)$\\
{\bf for} $j$ {\bf from} 1 {\bf to} $r$ {\bf do} \{
$b_j \leftarrow \frac{A}{a_j}$ \}\\
$anew \leftarrow$ substitute$(x_v=\alpha_v,a)$\\
$cnew \leftarrow$ substitute$(x_v=\alpha_v,c)$\\
$Inew \leftarrow$ updated list $i$ with $x_v=\alpha_v$ deleted\\
$\sigma \leftarrow$ MultivariateDiophant$(anew,cnew,Inew,d,p,k)$\\
$e \leftarrow (c-\textrm{sum}(\sigma_i b_i, i=1,\ldots,r))\textrm{ mod }p^k$\\
$monomial \leftarrow 1$\\
{\bf for} $m$ {\bf from} 1 {\bf to} $d$ {\bf while} $e \ne 0$ {\bf do} \{\\ 
\begin{addmargin}{1em} %3
$monomial \leftarrow monomial \times (x_v-\alpha_v)$\\
$cm \leftarrow$ coeff of $(x_v-\alpha_v)^m$ in the Taylor expansion of $e$
about $x_v=\alpha_v$\\
{\bf if} $cm \ne 0$ {\bf then} \{
\begin{addmargin}{1em} %4
$\Delta s \leftarrow$ MultivariateDiophant$(anew,cm,Inew,d,p,k)$\\
$\Delta s \leftarrow \Delta s\times monomial$ -- element-by-element operation\\
$\sigma \leftarrow \sigma + \Delta s$ -- element-by-element operation\\
$e \leftarrow (e-\textrm{sum}(\Delta s_i b_i,i=1,\ldots,r))
\textrm{ mod }p^k$ \} \} \}
\end{addmargin} %4
\end{addmargin} %3
{\bf else} \{
\begin{addmargin}{1em} %5
-- 2.2 Univariate case\\
$x_1 \leftarrow$ the variable appearing in $a$\\
-- Method: For each power of $x_1$, call UnivariateDiophant\\
$\sigma \leftarrow$ zero list of length $r$\\
{\bf for} each term $z$ in $c$ {\bf do} \{
\begin{addmargin}{1em} %6
$m \leftarrow \textrm{degree}(z,x_1)$\\
$cm \leftarrow \textrm{lcoeff}(z)$\\
$\Delta s \leftarrow$ UnivariateDiophant$(a,x_1,m,p,k)$\\
$\Delta s \leftarrow \Delta s \times cm$ -- element-by-element operations\\
$\sigma \leftarrow \sigma + \Delta s$ -- element-by-element-operations \} \}
\end{addmargin} %6
\end{addmargin} %5
\end{addmargin} %2
{\bf return}($\sigma$ mod $p^k$)
\end{addmargin} %1
{\bf end}

\cite{Gedd92} p 270\\
{\bf procedure} UnivariateDiophant$(a,x,m,p,k)$
\begin{addmargin}{1em}
-- Solve in ${\bf Z}_{p^k}[x]$ the univariate polynomial diophantine equation\\
--\quad $\sigma_1\times b_1+\cdots +\sigma_r\times b_r 
\equiv x^m (\textrm{ mod } p^k)$\\
-- where, in terms of the given list of polynomials $a_1,\ldots,a_r$\\
-- the polynomials $b_i,i=1,\ldots,r$, are defined by\\
--\quad $b_i=a_i\times\cdots\times a_{i-1}
\times a_{i+1}\times\cdots\times a_r$\\
-- The unique solution $\sigma_1,\ldots,\sigma_r$ will be computed such that\\
--\quad $\textrm{deg}(\sigma_i) < \textrm{deg}(a_i)$\\
--\\
-- Conditions: $p$ must not divide lcoeff($a_i$), $i=1,\ldots,r$\\
--\quad $a_i\textrm{ mod }p,i=1,\ldots,r$, must be pairwise relatively
prime in ${\bf Z}_p[x]$\\
--\\
-- OUTPUT\\
-- The value returned is the list $\sigma = [\sigma_1,\ldots,\sigma_r]$

$r \leftarrow$ number of polynomials in $a$\\
{\bf if} $r > 2$ {\bf then} \{
\begin{addmargin}{1em} %2
$s \leftarrow$ MultiTermEEAlift$(a,p,k)$\\
$result \leftarrow []$\\
{\bf for} $j$ {\bf from} 1 to $r$ {\bf do} \{
\begin{addmargin}{1em} %3
$result \leftarrow \textrm{append}(result,
\textrm{rem}(x^ms_j,a_j)\textrm{ mod }p^k)$ \} \}
\end{addmargin} %3
\end{addmargin} %2
{\bf else} \{
\begin{addmargin}{1em} %4
$s \leftarrow \textrm{EEAlift}(a_2,a_1,p,k)$\\
$q \leftarrow \textrm{quo}(x^ms_1,a_1)\textrm{ mod }p^k$\\
$result \leftarrow [\textrm{rem}(x^ms_1,a_1)\textrm{ mod }p^k,
(x^ms_2 + q a_2)\textrm{ mod }p^k]$ \}
\end{addmargin} %4
{\bf return}({\sl result})
\end{addmargin} %1
{\bf end}

\cite{Gedd92} p 270-271\\
{\bf procedure} MultiTermEEAlift$(a,p,x)$\\
\begin{addmargin}{1em} %1
-- MultiTermEEAlift computes $s_1,\ldots,s_r$ such that\\
--\quad $s_1\times b_1+\cdots+s_r\times b_r \equiv 1 (\textrm{mod }p^k)$\\
-- with $\textrm{deg}(s_j) < \textrm{deg}(a_j)$ where, in terms of the 
given list of\\
-- polynomials $a_1,\ldots,a_r$, the polynomials $b_i$ are defined by:\\
--\quad $b_i=a_1\times\cdots\times a_{i-1}\times a_{i+1}\times\cdots
\times a_r, i=1,\ldots,r$\\
--\\
-- Conditions: $p$ must not divide $\textrm{lcoeff}(a_i),i=1,\ldots,r$\\
-- $a_i$ mod $p,i=1,\ldots,r$, must be pairwise relatively prime in
${\bf Z}_p[x]$\\
$r \leftarrow$ number of polynomials in $a$\\
$q_{r-1} \leftarrow a_r$\\
{\bf for} $j$ {\bf from} $r-2$ {\bf by} -1 {\bf to} 1 {\bf do} \{\\
\begin{addmargin}{1em} %2
$q_j \leftarrow a_{j+1}\times q_{j+1}$ \}
\end{addmargin} %2
$\beta_0 \leftarrow 1$\\
{\bf for} $j$ {\bf from} 1 {\bf to} $r-1$ {\bf do} \{
\begin{addmargin}{1em} %3
$\sigma \leftarrow 
\textrm{MultivariateDiophant}([q_j,a_j],\beta_{j-1},0,p,k)$\\
$\beta_j \leftarrow \sigma_1$\\
$s_j \leftarrow \sigma_2$ \}\\
\end{addmargin} %3
$s_r \leftarrow \beta_{r-1}$\\
{\bf return}($[s_1,\ldots,s_r]$)
\end{addmargin} %1
{\bf end}

\cite{Gedd92} p 271\\
{\bf procedure} EEAlift$(a,b,p,k)$\\
\begin{addmargin}{1em}
-- EEAlift computes $s,t$ such that $s a + t b \equiv 1 (\textrm{mod }p^k)$\\
-- with $\textrm{deg}(s) < \textrm{deg}(b)$ and
$\textrm{deg}(t) < \textrm{deg}(a)$\\
-- Assumption: GCD($a$ mod $p$, $b$ mod $p) = 1$ in ${\bf Z}_p[x]$\\
$x \leftarrow $ the variable appearing in $a$ and $b$\\
$amodp \leftarrow a \textrm{ mod }p$\\
$bmodp \leftarrow b \textrm{ mod }p$\\
$s,t \leftarrow $ polynomials in ${\bf Z}_p[x]$ computing by the
Extended Euclidean Algorithm such that\\
\hspace*{1cm} $s\ amodp + t\ bmodp \equiv 1 (\textrm{mod }p)$\\
$smodp \leftarrow s$\\
$tmodp \leftarrow t$\\
$modulus \leftarrow p$\\
{\bf for} $j$ {\bf from} 1 {\bf to} $k-1$ {\bf do} \{
\begin{addmargin}{1em}
$e \leftarrow 1-s\times a-t\times b$\\
$c \leftarrow \frac{e}{modulus} \textrm{ mod }p$\\
$\overline{\sigma} \leftarrow smodp\times c$\\
$\overline{\tau} \leftarrow tmodp\times c$\\
$q \leftarrow \textrm{quo}(\overline{\sigma},bmodp)\textrm{ mod }p$\\
$\sigma \leftarrow \textrm{rem}(\overline{\sigma},bmodp)\textrm{ mod }p$\\
$\tau \leftarrow (\overline{\tau}+q\times amodp)\textrm{ mod }p$\\
$s \leftarrow s + \sigma\times modulus$\\
$t \leftarrow t + \tau\times modulus$\\
$modulus \leftarrow modulus\times p$ \}
\end{addmargin}
{\bf return}($[s,t]$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Multivariate Hensel Lifting}
\cite{Gedd92} p 272\\
{\bf procedure} MultivariateHensel$(a,I,p,l,u,lcU)$
\begin{addmargin}{1em} %1
-- INPUT\\
-- (1) A multivariate polynomial 
$a(x_1,\ldots,a_v) \in {\bf Z}[x_1,\ldots,x_v]$\\
--\quad which is primitive as a polynomial in the special variable $x_1$\\
-- (2) I, a list of equations 
$[x_2=\alpha_2,x_3=\alpha_3,\ldots,x_v=\alpha_v]$\\
--\quad representing the evaluation homomorphism used; mathematically,\\
--\quad we view it as the ideal 
I$=<x_2-\alpha_2,x_3-\alpha_3,\ldots,x_v-\alpha_v>$\\
--\quad and the following conditions must hold: 
lcoeff($a,x_1)\ne 0 (\textrm{mod I})$\\
-- (3) A prime integer $p$ which does not divide lcoeff($a$ mod I)\\
-- (4) A positive integer $l$ such that $p^l/2$ bounds the magnitude of all\\
--\quad integers appearing in $a$ and in any of its factors to be computed\\
-- (5) A list $u$ of $n>1$ univariate polynomials in ${\bf Z}_{p^l}[x_1]$
which are\\
--\quad pairwise relatively prime in the Euclidean domain ${\bf Z}_p[x_1]$,\\
--\quad such that 
$a \equiv u_1\times u_2\times\cdots\times u_n (\textrm{mod }<I,p^l>)$\\
-- (6) a list $lcU$ of the $n$ correct multivariate leading coefficients\\
--\quad corresponding to the univariate factors $u$\\
--\\
-- OUTPUT\\
-- (1) If there exist $n$ polynomials 
$U_1,U_2,\ldots,U_n \in {\bf Z}[x_1,\ldots,x_v]$\\
--\quad such that $a=U_1\times U_2\times\cdots\times U_n$ and for each 
$i=1,2,\ldots,n$\\
--\quad $U_i/\textrm{lcoeff}(U_i,x_1)\equiv u_i/\textrm{lcoeff}(u_i,x_i)
(\textrm{ mod }<I,p^l>)$\\
--\quad (where the divisions here are in the ring of integers mod $p^l$)\\
--\quad then the list $U=\{U_1,U_2,\ldots,U_n\}$ will be the value returned\\
-- (2) Otherwise, the value returned will signal "no such factorization"\\
--\\
-- Remark: The mod operation must use the symmetric representation\\
--\\
-- 1. Initialization for the multivariate iteration\\
$v \leftarrow 1+$ number of equations in $I$\\
$A_v \leftarrow a$\\
{\bf for} $j$ {\bf from} $v$ {\bf by} -1 {\bf to} 2 {\bf do} \{
\begin{addmargin}{1em} %2
$x_j \leftarrow \textrm{lhs}(I_{j-1})$\\
$\alpha_j \leftarrow \textrm{rhs}(I_{j-1})$\\
$A_{j-1} \leftarrow 
\textrm{substitute}(x_j=\alpha_j,A_j)\textrm{ mod }p^l$ \}
\end{addmargin} %2
$maxdeg \leftarrow \textrm{max}(\textrm{degree}(a,x_i),i=2,\ldots,v)$\\
$U \leftarrow u$\\
$n \leftarrow$ number of polynomials in $u$\\
-- 2. Variable-by-variable Hensel iteration\\
{\bf for} $j$ {\bf from} 2 {\bf to} $v$ {\bf do} \{
\begin{addmargin}{1em} %3
$U1 \leftarrow U$\\
$monomial \leftarrow 1$\\
{\bf for} $m$ {\bf from} 1 {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em} %4
{\bf if} $lcU_m \ne 1$ {\bf then} \{
\begin{addmargin}{1em} %5
$coef \leftarrow \textrm{substitute}(\{I[j],\ldots,I[v-1]\},lcU_m)
\textrm{ mod }p^l$\\
$U \leftarrow$ updated list $U$ with 
lcoeff($U_m,x_1$) replaced by $coef$ \} \}
\end{addmargin} %5
\end{addmargin} %4
$e \leftarrow A_j-\textrm{product}(U_i,i=1,\ldots,n)$\\
{\bf for} $k$ {\bf from} 1 {\bf to} degree($A_j,x_j$) 
{\bf while} $e\ne 0$ {\bf do} \{
\begin{addmargin}{1em} %6
$monomial \leftarrow monomial\times (x_j-\alpha_j)$\\
$c \leftarrow$ coeff of $(x_j-\alpha_j)^k$ in the Taylor expansion
of $e$ about $x_j=\alpha_j$\\
{\bf if} $c\ne 0$ {\bf then} \{
\begin{addmargin}{1em} %7
$\Delta U \leftarrow 
\textrm{MultivariateDiophant}(U1,c,[I[1],\ldots,I[j-2]],maxdeg,p,l)$\\
$\Delta U \leftarrow \Delta U\times monomial$ 
-- element-by-element operations\\
$U \leftarrow (U + \Delta U) \textrm{ mod }p^l$
-- element-by-element operations\\
$e \leftarrow (A_j-\textrm{product}(U_i,i=1,\ldots,n))\textrm{ mod }p^l$
\} \} \}
\end{addmargin} %7
\end{addmargin} %6
\end{addmargin} %3
-- 3. Check termination status\\
{\bf if} $a=\textrm{product}(U_i,i=1,\ldots,n)$ {\bf then return}($U$)
\begin{addmargin}{1em} %8
{\bf else return}({\sl no such factorization exists})
\end{addmargin} %8
\end{addmargin} %1
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Modular GCD}
\cite{Gedd92} p 307\\
{\bf procedure} MGCD(A,B)\\
\begin{addmargin}{1em}
-- Given $A,B \in {\bf Z}[x_1,\ldots,x_k]$, nonzero, we determine the
GCD of the\\
-- two polynomials via modular reduction.\\
-- Remove integer content\\
$a \leftarrow \textrm{icont}(A)$\\
$b \leftarrow \textrm{icont}(B)$\\
$A \leftarrow A/a$\\
$B \leftarrow B/b$\\
-- Compute coefficient bound for GCD(A,B)\\
$c \leftarrow \textrm{igcd}(a,b)$\\
$g \leftarrow \textrm{igcd}(\textrm{lcoeff}(A),\textrm{lcoeff}(B))$\\
$(q,H) \leftarrow (0,0)$\\
$n \leftarrow \textrm{min}(\textrm{deg}_k(A),\textrm{deg}_k(B))$\\
$limit \leftarrow 2^n\cdot |g|\cdot \textrm{min}(||A||_\infty,||B||_\infty)$\\
{\bf while} true {\bf do} \{
\begin{addmargin}{1em} %2
$p \leftarrow \textrm{New}(LargePrime)$\\
{\bf while} $p|q$ {\bf do} $p \leftarrow \textrm{New}(LargePrime)$\\
$A_p \leftarrow A \textrm{ mod }p$\\
$B_p \leftarrow B \textrm{ mod }p$\\
$g_p \leftarrow \textrm{ mod }p$\\
$C_p \leftarrow \textrm{PGCD}(A_p,B_p,p)$\\
$m \leftarrow \textrm{deg}_k(C_p)$\\
-- Normalize so that $g_p = \textrm{lcoeff}(C_p)$\\
$C_p \leftarrow g_p\cdot \textrm{lcoeff}(C_p)^{-1}\cdot C_p$\\
-- Test for unlucky homomorphisms\\
{\bf if} $m < n$ {\bf then} \{
\begin{addmargin}{1em} %3
$(q,H) \leftarrow (p,C_p)$\\
$n \leftarrow m$ \}
\end{addmargin} %3
{\bf elseif} $m=n$ {\bf then} \{
\begin{addmargin}{1em} %4
-- Test for completion. Update coefficients of\\
-- GCD candidate H and modulus $q$ via integer CRA\\
{\bf for all} coefficients $h_i$ in $H$ {\bf do} \{
\begin{addmargin}{1em} %5
$h_i \leftarrow \textrm{IntegerCRA}([q,p],[h_i,(C_p)_i])$\\
$q \leftarrow q\cdot p$ \}
\end{addmargin} %5
\end{addmargin} %4
{\bf if} $q > limit$ {\bf then} \{
\begin{addmargin}{1em} %6
-- Remove integer content of result and do division check\\
$C \leftarrow \textrm{pp}(H)$\\
{\bf if} $C|A$ {\bf and} $C|B$ {\bf then}
\begin{addmargin}{1em} %7
{\bf return}($c\cdot C$) \}
\end{addmargin} %7
\end{addmargin} %6
{\bf elseif} $m=0$ {\bf then}
\begin{addmargin}{1em} %8
{\bf return}($c$) \}
\end{addmargin} %8
\end{addmargin} %2
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Multivariate GCD Reduction}
\cite{Gedd92} p 309\\
{\bf procedure} PGCD$(A,B,p)$
\begin{addmargin}{1em}
-- Given $A,B \in {\bf Z}_p[x_1,\ldots,x_k]$\\
-- PGCD$(A,B,p)$ calculates the GCD of $A$ and $B$\\
{\bf if} $k=1$ {\bf then} \{ -- Call univariate GCD algorithm
\begin{addmargin}{1em} %2
$C \leftarrow \textrm{UGCD}(A,B,p)$\\
{\bf if} deg$(C)=0$ {\bf then} $C \leftarrow 1$\\
{\bf return}$(C)$ \}
\end{addmargin} %2
-- Determine content of $A$ and $B$ considered as multivariate\\
-- polynomials in ${\bf Z}_p[x_1,\ldots,x_{k-1}]$ with coefficients from
${\bf Z}_p[x_k]$\\
$a \leftarrow \textrm{cont}(A)$\\
$b \leftarrow \textrm{cont}(B)$\\
$A \leftarrow A/a$\\
$B \leftarrow B/b$\\
$c \leftarrow \textrm{UGCD}(a,b,p)$\\
$g \leftarrow \textrm{UGCD}(\textrm{lcoeff}(A),\textrm{lcoeff}(B),p)$\\
-- Notice that both $c$ and $g$ are in ${\bf Z}_p[x_k]$\\
-- Main loop\\
$(q,H) \leftarrow (1,1)$\\
$n \leftarrow \textrm{min}(\textrm{deg}_k(A),\textrm{deg}_k(B))$\\
$limit \leftarrow n + \textrm{deg}_k(g)$\\
{\bf while} true {\bf do} \{
\begin{addmargin}{1em} %3
$b \leftarrow \textrm{New}(Member {\bf Z}_p)$ with $g(b) \ne 0$\\
$A_b \leftarrow A\textrm{ mod }(x_k-b)$\\
$B_b \leftarrow B\textrm{ mod }(x_k-b)$\\
$C_b \leftarrow \textrm{PGCD}(A_b,B_b,p)$\\
$m \leftarrow \textrm{deg}_{k-1}(C_b)$\\
$g_b \leftarrow g(b)$\\
-- Normalize $C_b$ so that lcoeff$(C_b)=g_b$\\
$C_b \leftarrow g_b\cdot \textrm{lcoeff}(C_b)^{-1}C_b$\\
-- Test for unlucky homomorphism\\
{\bf if} $m<n$ {\bf then} \{
\begin{addmargin}{1em} %4
$(q,H) \leftarrow (1,1)$\\
$n \leftarrow m$ \}
\end{addmargin} %4
{\bf elseif} $m=n$ {\bf then}
\begin{addmargin}{1em} %5
-- Use previous result to continue building $H$ via\\
-- polynomial interpolation (i.e. via polynomial CRA)\\
$(q,H) \leftarrow \textrm{PolyInterp}(q,H,b,C_b,p)$
\end{addmargin} %5
--Test for completion\\
{\bf if} $\textrm{lcoeff}(H)=g$ {\bf then} \{
\begin{addmargin}{1em} %5
$C \leftarrow \textrm{pp}(H)$\\
{\bf if} $C|A$ and $C|B$ {\bf then return}$(c\cdot C)$\\
{\bf elseif} $m=0$ {\bf then return}$(c)$ \} \}
\end{addmargin} %5
\end{addmargin} %3
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Extended Zassenhaus GCD}
\cite{Gedd92} p 316\\
{\bf procedure} EX-GCD$(A,B)$
\begin{addmargin}{1em}
-- Given two polynomials $A,B \in {\bf Z}[x,y_1,\ldots,y_k]$\\
-- with $\textrm{deg}_x(A) \ge \textrm{deg}_x(B)$, we compute the triple\\
-- $<A/C,B/C,C>$ where $C=\textrm{GCD}(A,B)$, using Hensel lifting\\
-- Compute the content, primitive part, lcoeff, GCD, etc. all viewing $A$\\
-- and $B$ as polynomials over the coefficient domain 
${\bf Z}[y_1,\ldots,y_k]$\\
$a \leftarrow \textrm{cont}(A)$\\
$b \leftarrow \textrm{cont}(B)$\\
$A \leftarrow A/a$\\
$B \leftarrow B/a$\\
$g \leftarrow \textrm{GCD}(a,b)$\\
$a \leftarrow a/g$\\
$b \leftarrow b/g$\\
-- Find a valid evaluation prime\\
$p \leftarrow \textrm{New}(Prime)$ with lcoeff($A$) mod $p\ne 0$ and
lcoeff($B$) mod $p\ne 0$\\
-- Find a valid evaluation point ${\bf b}=(b_1,\ldots,b_k)$\\
-- with $0 \le b_i < p$ and as many $b_i's=0$ as possible\\
$b \leftarrow \textrm{New}(EvaluationPoint)$ with lcoeff$(A)({\bf b})\ne 0$
and lcoeff$(B)({\bf b})\ne 0$\\
$A_I \leftarrow A({\bf b})$ mod $p$\\
$B_I \leftarrow B({\bf b})$ mod $p$\\
$C_I \leftarrow \textrm{UGCD}(A_I,B_I)$\\
$d \leftarrow \textrm{deg}_x(C_I)$\\
{\bf if} $d=0$ {\bf then return}$(<Aa,Bb,g>)$\\
-- Double check the answer: Choose a new prime and evaluation point\\
$p^\prime \leftarrow \textrm{New}(Prime)$ with lcoeff($A$) mod $p^\prime\ne 0$
and lcoeff($B$) mod $p^\prime\ne 0$\\
${\bf c} \leftarrow \textrm{New}(EvaluationPoint)$ with lcoeff($A)({\bf c})$ mod $p^\prime\ne 0$ and lceoff($B)({\bf c})\ne 0$\\
$A_{I^\prime} \leftarrow A({\bf c}) \textrm{ mod }p^\prime$\\
$B_{I^\prime} \leftarrow B({\bf c}) \textrm{ mod} p^\prime$\\
$C_{I^\prime} \leftarrow \textrm{UGCD}(A_{I^\prime},B_{I^\prime})$\\
$d_{I^\prime} \leftarrow \textrm{deg}_x(C_{I^\prime})$\\
{\bf if} $d_{I^\prime} < d$ {\bf then} \{
\begin{addmargin}{1em} %2
-- Previous evaluation was bad, try again\\
$A_I \leftarrow A_{I^\prime}$\\
$B_I \leftarrow B_{I^\prime}$\\
$C_I \leftarrow C_{I^\prime}$\\
$d \leftarrow d_{I^\prime}$\\
${\bf b} \leftarrow {\bf c}$\\
{\bf goto} double check step \}
\end{addmargin} %2
{\bf elseif} $d_{I^\prime} > d$ {\bf then} \{
\begin{addmargin}{1em} %3
-- This evaluation was bad; repeat double check step\\
{\bf goto} double check step \}
\end{addmargin} %3
-- Test for special cases\\
{\bf if} $d = 0$ {\bf then return}$(<A\cdot a,B\cdot b,g>)$\\
{\bf if} $d=\textrm{deg}_x(B)$ {\bf then} \{
\begin{addmargin}{1em} %4
{\bf if} $B|A$ {\bf then return}$(<a\cdot A/B,b,B\cdot g>)$\\
{\bf else} \{
\begin{addmargin}{1em} %5
-- Bad evaluation, repeat the double check\\
$d \leftarrow d-1$\\
{\bf goto} double check step \} \}
\end{addmargin} %5
\end{addmargin} %4
-- Check for relatively prime cofactors\\
{\bf if} UGCD$(B_I,C_I)=1$ {\bf then} \{
\begin{addmargin}{1em} %6
$U_I \leftarrow B$\\
$H_I \leftarrow B_I/C_I$\\
$c \leftarrow b$ \}
\end{addmargin} %6
{\bf elseif} UCGD$(A_I,C_I)=1$ {\bf then} \{
\begin{addmargin}{1em} %7
$U_I \leftarrow A$\\
$H_I \leftarrow A_I/C_I$\\
$c \leftarrow a$ \}
\end{addmargin} %7
{\bf else return}(SGCD$(A,B,{\bf b},p)$)\\
-- Lifting step\\
$U_I \leftarrow c\cdot U_I$\\
$c_I \leftarrow c({\bf b})\textrm{ mod }p$\\
$C_I \leftarrow c_I\cdot C_I$\\
$(C,E) \leftarrow \textrm{EZ\_LIFT}(U_I,C_I,H_I,{\bf b},p.c)$\\
{\bf if} $U_I=C\cdot E$ {\bf then goto} double check step\\
-- Final check\\
$C \leftarrow \textrm{pp}(C)$\\
{\bf if} $C|B$ {\bf and} $C|A$ {\bf then return}
$(<a\cdot A/C,b\cdot B/C,g\cdot C>)$\\
{\bf else goto} double check step
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{GCD Heuristic}
\cite{Gedd92} p 330\\
{\bf procedure} GCDHEU$(A,B)$
\begin{addmargin}{1em} %1
-- Given polynomials $A,B \in {\bf Z}[x_1,\ldots,x_k]$ we use\\
-- a heuristic method for trying to determine $G=GCD(A,B)$\\
$vars \leftarrow$ Indeterminates($A$) $\cup$ Indeterminates($B$)\\
{\bf if} $\textrm{SizeOf}(vars)=0$ {\bf then return}$(\textrm{igcd}(A,B))$\\
{\bf else} $x \leftarrow vars[1]$\\
$\xi \leftarrow 2\cdot \textrm{min}(||A||_\infty,||B||_\infty)+2$\\
{\bf to} 6 {\bf do} \{
\begin{addmargin}{1em} %2
{\bf if} $\textrm{length}(\xi)\cdot \textrm{max}(\textrm{deg}_x(A),
\textrm{deg}_x(B))>5000$
{\bf then}
\begin{addmargin}{1em} %3
Return\_To\_Top\_Level(fail\_flag)
\end{addmargin} %3
$\gamma \leftarrow \textrm{GCDHUE}(\phi_{x-\xi}(A),\phi_{x-\xi}(B))$\\
{\bf if} $\gamma \ne fail\_flag$ {\bf then}
\begin{addmargin}{1em} %4
-- Generate polynomial $G$ from $\xi$-adic expansion of $\gamma$\\
$G \leftarrow 0$\\
{\bf for} $i$ {\bf from} 0 {\bf while} $\gamma \ne 0$ {\bf do} \{
\begin{addmargin}{1em} %5
$g_i \leftarrow \phi_\xi{\gamma}$\\
$G \leftarrow G+g_i\cdot x^i$\\
$\gamma \leftarrow (\gamma-g_i)/\xi$ \}
\end{addmargin} %5
{\bf if} $G|A$ {\bf and} $G|B$ {\bf then return}($G$)
\end{addmargin} %4
-- Create a new evaluation point using square of golden ratio\\
$\eta \leftarrow \textrm{iquo}(\xi\times 73794, 27011)$ \}
\end{addmargin} %2
{\bf return}(fail\_flag)
\end{addmargin} %1
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Square-Free Factorization}
\cite{Gedd92} p 340\\
{\bf procedure} SquareFree($a(x)$)
\begin{addmargin}{1em}
-- Given a primitive polynomial $a(x) \in {\bf R}[x]$, {\bf R} a UFD\\
-- with characteristic zero, we calculate the\\
-- square-free factorization of $a(x)$\\
$i \leftarrow 1$\\
Output $\leftarrow 1$\\
$b(x) \leftarrow a^\prime(x)$\\
$c(x) \leftarrow \textrm{GCD}(a(x),b(x))$\\
$w(x) \leftarrow a(x)/c(x)$\\
{\bf while} $c(x) \ne 1$ {\bf do} \{
\begin{addmargin}{1em}
$y(x) \leftarrow \textrm{GCD}(w(x),c(x))$\\
$z(x) \leftarrow w(x)/y(x)$\\
Output $\leftarrow$ Output$\cdot z(x)^i$\\
$i \leftarrow i+1$\\
$w(x) \leftarrow y(x)$\\
$c(x) \leftarrow c(x)/y(x)$ \}
\end{addmargin}
Output $\leftarrow$ Output$\cdot w(x)^i$\\
{\bf return}(Output)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Yun's Square-Free Factorization}
\cite{Gedd92} p 342\\
{\bf procedure} SquareFree2($a(x)$)
\begin{addmargin}{1em}
-- Given a primitive polynomial $a(x) \in {\bf R}[x]$, {\bf R} a\\
-- UFD of characteristic zero, we calculate the square-free\\
-- factorization of $a(x)$ using Yun's algorithm\\
$i \leftarrow 1$\\
Output $\leftarrow 1$\\
$b(x) \leftarrow a^\prime(x)$\\
$c(x) \leftarrow \textrm{GCD}(a(x),b(x))$\\
{\bf if} $c(x)=1$ {\bf then} $w(x) \leftarrow a(x)$\\
{\bf else} \{
\begin{addmargin}{1em}
$w(x) \leftarrow a(x)/c(x)$\\
$y(x) \leftarrow b(x)/c(x)$\\
$z(x) \leftarrow y(x)-w^\prime(x)$\\
{\bf while} $z(x) \ne 0$ {\bf do} \{
\begin{addmargin}{1em}
$g(x) \leftarrow \textrm{GCD}(w(x),z(x))$\\
Output $\leftarrow$ Output$\cdot g(x)^i$\\
$i \leftarrow i+1$\\
$w(x) \leftarrow w(x)/g(x)$\\
$y(x) \leftarrow z(x)/g(x)$\\
$z(x) \leftarrow y(x)-w^\prime(x)$ \} \}
\end{addmargin}
\end{addmargin}
Output $\leftarrow$ Output$\cdot w(x)^i$\\
{\bf return}(Output)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Finite Field Square-Free Factorization}
\cite{Gedd92} p 345\\
{\bf procedure} SquareFreeFF$(a(x),q)$
\begin{addmargin}{1em}
-- Given a monic polynomial $a(x) \in GF(q)[x]$, with $GF(q)$ a\\
-- Galois field of order $q=p^m$, we calculate the\\
-- square-free factorization of $a(x)$\\
$i \leftarrow 1$\\
Output $\leftarrow 1$\\
$b(x) \leftarrow a^\prime(x)$\\
{\bf if} $b(x) \ne 0$ {\bf then} \{
\begin{addmargin}{1em}
$c(x) \leftarrow \textrm{GCD}(a(x),b(x))$\\
$w(x) \leftarrow a(x)/c(x)$\\
{\bf while} $w(x) \ne 1$ {\bf do} \{
\begin{addmargin}{1em}
$y(x) \leftarrow \textrm{GCD}(w(x),c(x))$\\
$z(x) \leftarrow w(x)/y(x)$\\
Output $\leftarrow$ Output$\cdot z(x)^i$\\
$i \leftarrow i+1$\\
$w(x) \leftarrow y(x)$\\
$c(x) \leftarrow c(x)/y(x)$ \}
\end{addmargin}
{\bf if} $c(x) \ne 1$ {\bf then} \{
\begin{addmargin}{1em}
$c(x) \leftarrow c(x)^{1/p}$\\
Output $\leftarrow$ Output$\cdot (\textrm{SquareFreeFF}(c(x)))^p$ \}\}
\end{addmargin}
\end{addmargin}
{\bf else} \{
\begin{addmargin}{1em}
$a(x) \leftarrow a(x)^{1/p}$\\
Output $\leftarrow (\textrm{SquareFreeFF}(a(x)))^p$ \}
\end{addmargin}
{\bf return}(Output)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Berlekamp's Factoring}
\cite{Gedd92} p 352\\
{\bf procedure} Berlekamp$(a(x),q)$
\begin{addmargin}{1em}
-- Given a square-free polynomial $a(x) \in GF(q)[x]$\\
-- calculate irreducible factors $a_1(x),\ldots,a_k(x)$ such\\
-- that $a(x)=a_1(x)\cdots a_k(x)$\\
$Q \leftarrow \textrm{FormMatrixQ}(a(x),q)$\\
$v^{[1]},v^{[2]},\ldots,v^{[k]} \leftarrow \textrm{NullSpaceBasis}(Q-I))$\\
-- Note we can ensure that $v^{[1]}=(1,0,\ldots,0)$\\
$factors \leftarrow \{a(x)\}$\\
$r \leftarrow 2$\\
{\bf while} SizeOf$(factors) < k$ {\bf do} \{
\begin{addmargin}{1em}
{\bf foreach} $u(x) \in factors$ {\bf do} \{
\begin{addmargin}{1em}
{\bf foreach} $s \in GF(q)$ {\bf do} \{
\begin{addmargin}{1em}
$g(x) \leftarrow \textrm{GCD}(v^{[r]}(x)-s,u(x))$\\
{\bf if} $g(x) \ne 1$ {\bf or} $g(x) \ne u(x)$ {\bf then} \{
\begin{addmargin}{1em}
Remove$(u(x),factors)$\\
$u(x) \leftarrow u(x)/g(x)$\\
Add$(\{u(x),g(x)\},factors)$ \}
\end{addmargin}
{\bf if} SizeOf$(factors) = k$ {\bf then return}$(factors)$ \}
\end{addmargin}
\end{addmargin}
$r \leftarrow r+1$ \} \}
\end{addmargin}
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Form Q Matrix}
\cite{Gedd92} p 353\\
{\bf procedure} FormMatrixQ$(a(x),q)$
\begin{addmargin}{1em}
-- Given a polynomial $a(x)$ of degree $n$ in $GF(q)[x]$, calculate\\
-- the $Q$ matrix required by Berlekamp's algorithm\\
$n \leftarrow \textrm{deg}(a(x))$\\
${\bf r} \leftarrow (1,0,\ldots,0)$\\
$Row(0,Q) \leftarrow {\bf r}$\\
{\bf for} $m$ {\bf from} 1 {\bf to} $(n-1)q$ {\bf do} \{
\begin{addmargin}{1em}
${\bf r} \leftarrow (-r_{n-1}\cdot a_0,r_0-r_{n-1}\cdot a_1,\ldots,
r_{n-2}-r_{n-1}\cdot a_{n-1})$\\
{\bf if} $q|m$ {\bf then}
\begin{addmargin}{1em}
Row$(m/q,Q) \leftarrow {\bf r}$ \}
\end{addmargin}
\end{addmargin}
{\bf return}($Q$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Null Space Basis}
\cite{Gedd92} p 356\\
{\bf procedure} NullSpaceBasis$(M)$
\begin{addmargin}{1em}
-- Given a square matrix $M$, we return a basis $\{v^{[1]},\ldots,v^{[k]}\}$
for the null\\
-- space $\{ {\bf v}:{\bf v}\cdot M={\bf 0}\}$ of $M$. 
This algorithm does this\\
-- by transforming $M$ to triangular idempotent form\\
$n \leftarrow \textrm{rowsize}(M)$\\
{\bf for} $k$ {\bf from} 1 {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em}
-- Search for pivot element\\
{\bf for} $i$ {\bf from} $k$ {\bf to} $n$ {\bf while} $M_{ki}=0$ {\bf do}
$i \leftarrow i+1$\\
{\bf if} $i \le n$ {\bf then} \{
\begin{addmargin}{1em}
-- Normalize column $i$ and interchange this with column $k$\\
Column$(i,M) \leftarrow \textrm{Column}(i,M)\cdot M_{ki}^{-1}$\\
SwitchColumn$(i,k,M)$\\
-- Eliminate rest of row $k$ via column operations\\
{\bf for} $i$ {\bf to} $n$ {\bf with} $i\ne k$ {\bf do}
\begin{addmargin}{1em}
Column$(i,M) \leftarrow Column(i,M)-Column(k,M)\cdot M_{ki}$ \} \}
\end{addmargin}
\end{addmargin}
-- Convert $M$ to $M-I$\\
{\bf for} $i$ {\bf from} 1 {\bf to} $n$ {\bf do} $M_{ii} \leftarrow M_{ii}-1$\\
-- Read off nonzero rows of $M$\\
$i \leftarrow 0$\\
$j \leftarrow 1$\\
{\bf while} $j \le n$ {\bf do} \{
\begin{addmargin}{1em}
{\bf while} Row$(j,M)=0$ {\bf and} $j \le n$ {\bf do} $j \leftarrow j+1$\\
{\bf if} $j \le n$ {\bf then} \{
\begin{addmargin}{1em}
$i \leftarrow i+1$\\
$v^{[i]} \leftarrow \textrm{Row}(j,M)$ \} \}
\end{addmargin}
\end{addmargin}
\end{addmargin}
{\bf return}$(\{v^{[1]},\ldots,v^{[i]}\})$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Big Prime Berlekamp Factoring}
\cite{Gedd92} p 367\\
{\bf procedure} BigPrimeBerlekamp$(a(x),p^m)$
\begin{addmargin}{1em}
-- Given a square-free polynomial $a(x) \in GF(p^m)[x]$\\
-- calculate irreducible factors $a_1(x),\ldots,a_k(x)$ such\\
-- that $a(x)=a_1(x)\cdots a_k(x)$ using the big prime\\
-- variation of Berlekamp's algorithm\\
$Q \leftarrow \textrm{BinaryPoweringFormQ}(a(x))$\\
${\bf v}^{[1]},{\bf v}^{[2]},\ldots,{\bf v}^{[k]} 
\leftarrow \textrm{NullSpaceBasis}(Q-I)$\\
-- Note: we can ensure that ${\bf v}^{[1]}=(1,0,\ldots,0)$\\
$factors \leftarrow \{a(x)\}$\\
{\bf while} SizeOf$(factors) < k$ {\bf do} \{
\begin{addmargin}{1em}
{\bf foreach} $u(x) \in factors$ {\bf do} \{
\begin{addmargin}{1em}
$(c_1,\ldots,c_k) \leftarrow \textrm{RandomCoefficients}(GF(p^m))$\\
$v(x) \leftarrow c_1v^{[1]}(x)+\cdots+c_kv^{[k]}(x)$\\
{\bf if} $p=2$ {\bf then}
\begin{addmargin}{1em}
$v(x) \leftarrow v(x)+v(x)^2+\cdots+v(x)^{2^{m-1}}$
\end{addmargin}
{\bf else} $v(x) \leftarrow v(x)^{(p^m-1)/2}-1 \textrm{ mod }u(x)$\\
$g(x) \leftarrow \textrm{GCD}(v(x),u(x))$\\
{\bf if} $g(x)\ne 1$ {\bf and} $g(x)\ne u(x)$ {\bf then} \{
\begin{addmargin}{1em}
Remove$(u(x),factors)$\\
$u(x) \leftarrow u(x)/g(x)$\\
Add$(\{u(x),g(x)\},factors)$\\
{\bf if} SizeOf$(factors) = k$ {\bf then return}$(factors)$ \} \} \}
\end{addmargin}
\end{addmargin}
\end{addmargin}
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Partial Distinct Degree Factorization}
\cite{Gedd92} p 371\\
{\bf procedure} PartialFactorDD$(a(x),q)$
\begin{addmargin}{1em}
-- Given a square-free polynomial $a(x)$ in $GF(q)[x]$\\
-- we calculate the partial distinct degree factorization\\
-- $a_1(x)\cdots a_d(x)$ of $a(x)$\\
$i \leftarrow 1$\\
$w(x) \leftarrow x$\\
$a_0(x) \leftarrow 1$\\
{\bf while} $i \le \textrm{degree}(a(x))/2$ {\bf do} \{
\begin{addmargin}{1em}
$w(x) \leftarrow w(x)^q\textrm{ mod }a(x)$\\
$a_i(x) \leftarrow \textrm{GCD}(a(x),w(x)-x)$\\
{\bf if} $a_i(x) \ne 1$ {\bf then} \{
\begin{addmargin}{1em}
$a(x) \leftarrow a(x)/a_i(x)$\\
$w(x) \leftarrow w(x)\textrm{ mod }a(x)$ \}
\end{addmargin}
$i \leftarrow i+1$ \}
\end{addmargin}
{\bf return}$(a_0(x)\cdots a_{i-1}(x)a(x))$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Splitting Distinct Degree Factorization}
\cite{Gedd92} p 373\\
{\bf procedure} SplitDD$(a(x),n,p^m)$
\begin{addmargin}{1em}
-- We assume that $a(x)$ is a polynomial in $GF(p^m)$\\
-- made up of factors all of degree $n$. We split $a(x)$\\
-- into its complete factorization via Cantor-Zassenhaus method\\
{\bf if} deg$(a,x) \le n$ {\bf then return}$(\{a(x)\})$\\
-- each factor has degree given by:\\
$m \leftarrow \textrm{deg}(a(x),x)/n$\\
$factors \leftarrow \{a(x)\}$\\
{\bf while} SizeOf$(factors) < m$ {\bf do} \{
\begin{addmargin}{1em}
$v(x) \leftarrow \textrm{RandomPoly}(\textrm{degree}=2n-1)$\\
{\bf if} $p=2$ {\bf then}
\begin{addmargin}{1em}
$v(x) \leftarrow v(x)+v(x)^2+\cdots+v(x)^{2^{n\cdot m-1}}$
\end{addmargin}
{\bf else}
\begin{addmargin}{1em}
$v(x) \leftarrow v(x)^{(q^n-1)/2}-1$
\end{addmargin}
$g(x) \leftarrow \textrm{GCD}(a(x),v(x))$\\
{\bf if} $g(x) \ne 1$ {\bf and} $g(x) \ne a(x)$ {\bf then}\\
$factors \leftarrow \textrm{SplitDD}(g(x),n,p^m) \cup 
\textrm{SplitDD}(a(x)/g(x),n,p^m)$ \}
\end{addmargin}
{\bf return}($factors$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Factorization over Algebraic Number Fields}
\cite{Gedd92} p 383\\
{\bf procedure} AlgebraicFactorization$(a(z),m(x),\alpha)$
\begin{addmargin}{1em}
-- Given a square-free polynomial $a(z) \in F(\alpha)[z]$, $\alpha$\\
-- an algebraic number with minimal polynomial $m(x)$\\
-- of degree $n$, we factor $a$. We consider $a$ as\\
-- a bivariate polynomial in $\alpha$ and $z$.\\
--\\
-- Find $s$ such that Norm$(a_s(z))$ is square-free\\
$s \leftarrow 0$\\
$a_s(\alpha,z) \leftarrow a(\alpha,z)$\\
Norm$(a_s) \leftarrow \textrm{res}_x(m(x),a_x(x,z))$\\
{\bf while} deg(GCD(Norm$(a_s)$,Norm$(a_s)^\prime))\ne 0$ {\bf do} \{
\begin{addmargin}{1em}
$s\leftarrow s+1$\\
$a_s(\alpha,z) \leftarrow a_s(\alpha,z-\alpha)$\\
Norm$(a_s) \leftarrow \textrm{res}_x(m(x),a_s(x,z))$ \}
\end{addmargin}
-- Factor Norm$(a_s)$ in $F[z]$ and lift resutls to $F(\alpha)[z]$\\
$b \leftarrow$ factors(Norm$(a_s)$)\\
{\bf if} SizeOf$(b)=1$ {\bf then return}$(a(z))$\\
{\bf else}
\begin{addmargin}{1em}
{\bf foreach} $a_i(z) \in b$ {\bf do} \{
\begin{addmargin}{1em}
$a_i(\alpha,z) \leftarrow \textrm{GCD}(a_i(z),a_s(\alpha,z))$\\
$a_i(\alpha,z) \leftarrow a_i(\alpha,z+s\cdot\alpha)$\\
substitute$(a_i(x) \leftarrow a_i(\alpha,z),b)$ \}
\end{addmargin}
\end{addmargin}
{\bf return}$(b)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Fraction-Free Gaussian Elimination}
\cite{Gedd92} p 398\\
{\bf procedure} FractionFreeElim$(A)$
\begin{addmargin}{1em}
-- Given an $m\times m$ matrix $A$ (with entries $a_{ij}$),\\
-- reduce it to upper echelon form \\
$sign \leftarrow 1$\\
$divisor \leftarrow 1$\\
$r \leftarrow 1$\\
-- Eliminate below row $r$, with pivot in column $k$\\
{\bf for} $k$ {\bf from} 1 {\bf to} $n$ {\bf while} $r \le m$ {\bf do} \{
\begin{addmargin}{1em}
-- Find a nonzero pivot\\
{\bf for} $p$ {\bf from} $r$ {\bf to} $m$ 
{\bf while} $a_{pk}=0$ {\bf do} \{\}\\
{\bf if} $p \le m$ {\bf then} \{
\begin{addmargin}{1em}
-- Pivot is in row $p$, so switch rows $p$ and $r$\\
{\bf for} $j$ {\bf from} $k$ {\bf to} $n$ {\bf do} 
\{ interchange $a_{pj}$ and $a_{rj}$ \}\\
-- Keep track of sign changes due to row exchange\\
{\bf if} $r\ne p$ {\bf then} $sign \leftarrow -sign$\\
{\bf for} $i$ {\bf from} $r+1$ {\bf to} $m$ {\bf do} \{
\begin{addmargin}{1em} 
{\bf for} $j$ {\bf from} $k+1$ {\bf to} $n$ {\bf do} \{
\begin{addmargin}{1em} 
$a_{ij} \leftarrow (a_{rk}a_{ij}-a_{rj}a_{ik})/divisor$ \}
\end{addmargin}
$a_{ik} \leftarrow 0$ \}
\end{addmargin}
$divisor \leftarrow a_{rk}$\\
$r \leftarrow r+1$ \} \}
\end{addmargin}
\end{addmargin}
-- Optionally, compute the determinant for square\\
-- or augmented matrices\\
{\bf if} $r=m+1$ {\bf then} $det \leftarrow sign\cdot divisor$
{\bf else} $det \leftarrow 0$\\
{\bf return}$(A)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Nonlinear Elimination}
\cite{Gedd92} p 417\\
{\bf procedure} NonlinearElim$(P)$
\begin{addmargin}{1em}
-- Given a set of polynomials \\
-- $P=\{p_1,\ldots,p_k\} \subset \tilde{F}[x_1,\ldots,x_r]$\\
-- none of which are constants or multiples of any others, construct\\
-- a reduced system if possible.\\
-- Note that we always remove the (multivariate) content,\\
-- cecause of exponential coefficient growth\\
--\\
-- Distribute the $p_i$ into subsets (by domains); also note\\
-- all pairs of (distinct) polnomials in each subset\\
{\bf for} $i$ {\bf from} 1 {\bf to} $r$ {\bf do} \{
$E_i \leftarrow \emptyset; B_i \leftarrow \emptyset \}$\\
$E_{r+1} \leftarrow \emptyset$\\
{\bf foreach} $p \in P$ {\bf do} \{
\begin{addmargin}{1em}
{\bf if} $p\in\tilde{F}[x_j,\ldots,x_r]-\tilde{F}[x_{j+1},\ldots,x_r]$
{\bf then} \{
\begin{addmargin}{1em}
$B_j \leftarrow B_j \cup \{ [q,\textrm{pp}(p)]:q \in E_j \}$\\
$E_j \leftarrow E_j \cup \{ \textrm{pp}(p) \} \} \}$
\end{addmargin}
\end{addmargin}
-- Compute resultants until each $E_i$ has a member, or\\
-- no more resultants are left\\
{\bf do until} $(E_i\ne\emptyset, 1 \le i\le r)$ 
{\bf or} $(B_i = \emptyset, 1 \le i \le r-1)$ \{
\begin{addmargin}{1em}
$k \leftarrow \textrm{max} \{ i: B_i \ne \emptyset \}$\\
$[f,g] \leftarrow$ an element of $B_k$\\
$B_k \leftarrow B_k- \{ [f,g] \}$\\
$p \leftarrow \textrm{pp}(\textrm{res}_k(f,g))$\\
{\bf if} $p \ne 0$ {\bf then} \{
\begin{addmargin}{1em}
{\bf if} $p=1$ {\bf then return}($no solutions$)\\
{\bf else if} 
$p \in \tilde{F}[x_j,\ldots,x_r]-\tilde{F}[x_{j+1},\ldots,x_r]$ {\bf and}\\
\begin{addmargin}{1em}
(no $s \in E_j$ divides $p$) {\bf then} \{
\end{addmargin}
$B_j\leftarrow B_j\cup\{[s,p]:s\in E_j\}$\\
$E_j\leftarrow E_j\cup \{p\}\}\}\}$
\end{addmargin}
\end{addmargin}
{\bf return}$(\{E_1,\ldots,E_r\})$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Solution of a Nonlinear System of Equations}
\cite{Gedd92} p 421\\
{\bf procedure} NonlinearSolve$(P)$
\begin{addmargin}{1em}
-- Given a set $P \subset \tilde{F}[x_1,\ldots,x_r]$ corresponding to a\\
-- system of $k$ nonlinear equations $(k\ge r)$ with finitely\\
-- many solutions, find the common roots of $P$\\
$G \leftarrow \textrm{NonlinearElim}(P)$\\
$roots \leftarrow \emptyset$\\
-- If we obtain a nonzero constant, there are no solutions\\
{\bf if} no solutions exist {\bf then return}$(roots)$\\
{\bf else} \{
\begin{addmargin}{1em}
-- The reduced system $G$ has the form $\{E_1,\ldots,E_r\}$\\
-- Find the roots of the univariate polynomials\\
$q \leftarrow$ GCD( polynomials in $E_r$)\\
$roots \leftarrow roots \cup \{ (\alpha):q(\alpha)=0 \}$\\
-- Now extend each partial root by back-solving\\
{\bf for} $j$ {\bf from} $r-1$ {\bf by} -1 {\bf to} 1 {\bf do} \{
\begin{addmargin}{1em}
$R \leftarrow \emptyset$\\
{\bf foreach} $(\alpha_{j+1},\ldots,\alpha_r)\in roots$ {\bf do} \{
\begin{addmargin}{1em}
$U_j \leftarrow \{e(x_j,\alpha_{j+1},\ldots,\alpha_r):e \in E_j\}-\{0\}$\\
$q \leftarrow$ GCD( polynomials in $U_j$)\\
-- Note that $q$ may sometimes be constant\\
$R \leftarrow R \cup \{(\alpha,\alpha_{j+1},\ldots,\alpha_r):q(\alpha)=0\}$\\
\end{addmargin}
\end{addmargin}
$roots \leftarrow R$ \}
\end{addmargin}
{\bf return}$(roots)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Full Reduction}
\cite{Gedd92} p 436\\
{\bf procedure} Reduce$(p,Q)$
\begin{addmargin}{1em}
-- Given a polynomial $p$ and a set of polynomials $Q$\\
-- from the ring $F[x]$, find a $q$ such that $p \mapsto^* q$\\
-- Start with the whole polynomial\\
$r \leftarrow p$\\
$q \leftarrow 0$\\
-- If no reducers exist, strip off the leading monomial\\
-- otherwise, continue to reduce\\
{\bf while} $r\ne 0$ {\bf do} \{
\begin{addmargin}{1em}
{\bf while} $R_{r,Q} \ne \emptyset$ {\bf do} \{
\begin{addmargin}{1em}
$f \leftarrow \textrm{selectpoly}(R_{r,Q})$\\
$r \leftarrow r-\frac{M(r)f}{M(f)}$ \}
\end{addmargin}
$q \leftarrow q+M(r)$\\
$r \leftarrow r-M(r)$ \}
\end{addmargin}
{\bf return}$(q)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Buchberger's Algorithm for Gr\"obner Bases}
\cite{Gedd92} p 446\\
{\bf procedure} Gbasis$(P)$
\begin{addmargin}{1em}
-- Given a set of polynomials $P$, compute $G$ such\\
-- that $<G>=<P>$ and $G$ is a Gr\"obner Basis\\
$G \leftarrow P$\\
$k \leftarrow length(G)$\\
-- We denote the $i$-th element of the ordered set $G$ by $G_i$\\
$B \leftarrow \{ [i,j]:1 \le i < j \le k \}$\\
{\bf while} $B \ne \emptyset$ {\bf do} \{
\begin{addmargin}{1em}
$[i,j] \leftarrow \textrm{selectpair}(B,G)$\\
$B \leftarrow B - \{[i,j]\}$\\
$h \leftarrow \textrm{Reduce}(\textrm{Spoly}(G_i,G_j),G)$\\
{\bf if} $h\ne 0$ {\bf then} \{
\begin{addmargin}{1em}
$G \leftarrow G \cup \{h\}$\\
$k \leftarrow k+1$\\
$B \leftarrow B \cup \{[i,k]:1\le i < k\} \}\}$
\end{addmargin}
\end{addmargin}
{\bf return}$(G)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Consruction of a Reduced Ideal Basis}
\cite{Gedd92} p 448\\
{\bf procedure} ReduceSet$(E)$
\begin{addmargin}{1em}
-- Given a set $E$ (not necessarily a Gr\"obner basis),\\
-- compute $(\tilde{E})$ such that 
$<E>=<\tilde{E}>$ and $\tilde{E}$ is reduced\\
-- First, remove any redundant elements\\
$R \leftarrow E$\\
$P \leftarrow \emptyset$\\
$h \leftarrow \textrm{Reduce}(h,P)$\\
{\bf while} $R \ne \emptyset$ {\bf do} \{
\begin{addmargin}{1em}
$h \leftarrow \textrm{selectpoly}(R)$\\
$R \leftarrow R-\{h\}$\\
{\bf if} $h \ne 0$ {\bf then} \{
\begin{addmargin}{1em}
$Q \leftarrow \{q\in P$ such that hterm$(h)$ $|$ hterm$(q)$ \}\\
$R \leftarrow R \cup Q$\\
$P \leftarrow P - Q \cup \{h\}$ \}\}
\end{addmargin}
\end{addmargin}
-- Ensure each element is reduced modulo the others\\
$(\tilde{E}) \leftarrow \emptyset$\\
$S \leftarrow P$\\
{\bf foreach} $h \in P$ {\bf do} \{
\begin{addmargin}{1em}
$h \leftarrow \textrm{Reduce}(h,S-\{h\})$\\
$\tilde{E} \leftarrow \tilde{E} \cup \{h\}$ \}
\end{addmargin}
{\bf return}$(\tilde{E})$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Improved Construction of Reduced Gr\"obner Basis}
\cite{Gedd92} p 450\\
{\bf procedure} Gbasis$(P)$
\begin{addmargin}{1em}
-- Given polynomials $P$, find the corresponding reduced\\
-- Gr\"obner basis $G$\\
-- First, pre-reduce the raw input set\\
-- optionally, just set $G \leftarrow P$\\
$G \leftarrow \textrm{ReduceSet}(P)$\\
$k \leftarrow \textrm{length}(G)$\\
$B \leftarrow \{ [i,j] : 1\le i < j\le k \}$\\
{\bf while} $B \ne \emptyset$ {\bf do} \{
\begin{addmargin}{1em}
$[i,j] \leftarrow \textrm{selectpair}(B,G)$\\
$B \leftarrow B - \{[i,j]\}$\\
{\bf if} criterion1$([i,j],G)$ {\bf and} 
criterion2$([i,j],B,G)$ {\bf then} \{
\begin{addmargin}{1em}
$h \leftarrow \textrm{Reduce}(\textrm{Spoly}(G_i,G_j),G)$\\
{\bf if} $h \ne 0$ {\bf then} \{
\begin{addmargin}{1em}
$G \leftarrow G \cup \{h\}$\\
$k \leftarrow k+1$\\
$B \leftarrow B \cup \{[i,k] : 1\le i < k\} \}\}\}$
\end{addmargin}
\end{addmargin}
\end{addmargin}
-- Discard redundant elements and inter-reduce\\
$R \leftarrow \{ g\in G \textrm{ such that } R_{g,G}-\{g\}\ne \emptyset\}$\\
{\bf return}(ReduceSet($G-R)$)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Solution of Systems for One Variable}
\cite{Gedd92} p 457\\
{\bf procedure} Solve1$(P,\tilde{x})$
\begin{addmargin}{1em}
-- Given a system $P$ with finitely many solutions, find\\
-- the smallest polynomial containing the solutions in $\tilde{x}$\\
$G \leftarrow \textrm{Gbasis}(P)$\\
-- Assume a polynomial of form $\sum{a_k\tilde{x}^k}$\\
-- then require that\\
--\quad Reduce$(\sum{a_k\tilde{x}^k},G)=
\sum{a_k\textrm{Reduce}(\tilde{x}^k,G)}=0$\\
$k \leftarrow 0$\\
-- If $G$ does not satify the termination theorem, the loop may be infinite\\
{\bf do} \{
\begin{addmargin}{1em}
$p_k \leftarrow \textrm{Reduce}(\tilde{x}^k,G)$\\
{\bf if} $\exists (a_0,\ldots,a_k)\ne (0,\ldots,0)$
such that $\sum_{j=0}^k{a_jp_j}=0$ {\bf then}
\begin{addmargin}{1em}
{\bf return}$(a_k^{-1}\cdot \sum_{j=0}^k{a_j\tilde{x}^j})$
\end{addmargin}
{\bf else} $k \leftarrow k+1$ \}
\end{addmargin}
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Complete Solutions of a System}
\cite{Gedd92} p 458\\
{\bf procedure} Gr\"obnerSolve$(P)$
\begin{addmargin}{1em}
-- Given system $P \subset F[x]$ with finitely many solutions\\
-- find these solutions over an ``approprite'' extension of $F$\\
-- We store partially refined bases and partial roots in $Q$\\
$Q \leftarrow \{ [P,()] \}$\\
{\bf for} $k$ {\bf from} $n$ {\bf by} -1 {\bf to} 1 {\bf do} \{
\begin{addmargin}{1em}
$S \leftarrow \emptyset$\\
-- Refined/extend each element of $Q$ one more level\\
{\bf foreach} $[G,(\alpha_{k+1},\ldots,\alpha_n)] \in Q$ {\bf do} \{
\begin{addmargin}{1em}
$\tilde{G} \leftarrow 
\{ g(x_1,\ldots,x_k,\alpha_{k+1},\ldots,\alpha_n) : g \in G \}$\\
$\tilde{G} \leftarrow \textrm{Gbasis}(\tilde{G})$\\
$p \leftarrow \textrm{Solve1}(\tilde{G},x_k)$\\
-- The roots of $p$ in $x_k$ yield several new partial roots\\
{\bf if} $p \ne 1$ {\bf then}
\begin{addmargin}{1em}
$S \leftarrow S \cup 
\{[\tilde{G},(\alpha,\alpha_{k+1},\ldots,\alpha_n)]: p(\alpha) = 0\}$ \}
\end{addmargin}
\end{addmargin}
$Q \leftarrow S$ \}
\end{addmargin}
$roots \leftarrow \emptyset$\\
{\bf foreach} $[G,(\alpha_1,\ldots,\alpha_n)] \in Q$ {\bf do} \{
\begin{addmargin}{1em}
$roots \leftarrow roots \cup \{ (\alpha_1,\ldots,\alpha_n)\}$ \}
\end{addmargin}
{\bf return}$(roots)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Solution using Lexicographic Gr\"obner Basis}
\cite{Gedd92} p 461\\
{\bf procedure} LexSolve$(P)$
\begin{addmargin}{1em}
-- First, find a reduced Gr\"obner basis with respect to $<_L$\\
-- for the ideal generated by $P \subset F[x]$\\
$G \leftarrow \textrm{Gbasis}(P)$\\
$roots \leftarrow \emptyset$\\
-- If $P$ has finitely many solutions, we proceed to\\
-- solve the univariate polynomial in $x_n$\\
$p \leftarrow \textrm{selectpoly}(G \cap F[x_n])$\\
$roots \leftarrow roots \cup \{ (\alpha) : p(\alpha) = 0 \}$\\
-- Now, backsolve\\
{\bf for} $k$ {\bf from} $n-1$ {\bf by} -1 {\bf to} 1 {\bf do} \{
\begin{addmargin}{1em}
$S \leftarrow \emptyset$\\
$G_k \leftarrow G \cup F[x_k,\ldots,x_n]-F[x_{k+1},\ldots,x_n]$\\
{\bf foreach} $(\alpha_{k+1},\ldots,\alpha_n) \in roots$ {\bf do} \{
\begin{addmargin}{1em}
$\tilde{G} \leftarrow \{g(x_k,\alpha_{k+1},\ldots,\alpha_n) : g \in G_k\}$\\
$\tilde{G} \leftarrow \textrm{Gbasis}(\tilde{G})$\\
$p \leftarrow \textrm{selectpoly}(\tilde{G} \cap F[x_k])$\\
{\bf if} $p\ne 1$ {\bf then}
\begin{addmargin}{1em}
$S \leftarrow S \cup \{ (\alpha,\alpha_{k+1},\ldots,\alpha_n):p(\alpha)=0\}$\}
\end{addmargin}
$roots \leftarrow S$ \}
\end{addmargin}
\end{addmargin}
{\bf return}$(roots)$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Hermite's Method for Rational Functions}
\cite{Gedd92} p 485\\
{\bf procedure} HermiteReduction$(p,q,x)$
\begin{addmargin}{1em}
-- Given a rational function $p/q$ in $x$, this algorithm\\
-- uses Hermite's method to reduce $\int{p/q}$\\
-- Determine polynomial part of integral\\
poly\_part $\leftarrow \textrm{quo}(p,q)$\\
$r \leftarrow \textrm{rem}(p,q)$\\
-- Calculate the square-free factorization of $q$, returning a list\\
-- $q[1],\ldots,q[k]$ of polynomials\\
$(q[1],\ldots,q[k]) \leftarrow \textrm{SquareFree}(q)$\\
-- Calculate the partial fraction decomposition for $r/q$, returning\\
-- numerators $r[i,j]$ for $q[i]^j$\\
$r \leftarrow \textrm{PartialFractions}(r,q[1],\ldots,q[k])$\\
rational\_part $\leftarrow 0$\\
integral\_part $\leftarrow 0$\\
{\bf for} $i$ {\bf from} 1 {\bf to} $k$ {\bf do} \{
\begin{addmargin}{1em}
integral\_part $\leftarrow$ integral\_part$+r[i,1]/q[i]$\\
{\bf for} $j$ {\bf from} 2 {\bf to} $i$ {\bf do} \{
\begin{addmargin}{1em}
$n \leftarrow j$\\
{\bf while} $n>1$ {\bf do} \{
\begin{addmargin}{1em}
solve$(s\cdot q[i]+t\cdot q[i]^\prime = r[i,n])$ for $s$ and $t$\\
$n \leftarrow n-1$\\
rational\_part $\leftarrow$ rational\_part-$t/n/q[i]^n$\\
$r[i,n] \leftarrow s+t^\prime/n$ \}
\end{addmargin}
integral\_part $\leftarrow$ integral\_part+$r[i,1]/q[i]$ \} \}
\end{addmargin}
\end{addmargin}
{\bf return}(rational\_part$+\int$poly\_part$+\int$integral\_part)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Horowitz Reduction for Rational Functions}
\cite{Gedd92} p 490\\
{\bf procedure} HorowitzReduction$(p,q,x)$
\begin{addmargin}{1em}
-- For a given rational function $p/q$ in $x$, this algorithm calculates\\
-- the reduction of $\int{p/q}$ into a polynomial part and logarithmic part\\
-- via Horowitz' algorithm\\
poly\_part $\leftarrow$ quo$(p,q)$\\
$p \leftarrow \textrm{rem}(p,q)$\\
$d \leftarrow \textrm{GCD}(q,q^\prime)$\\
$b \leftarrow \textrm{quo}(q,d)$\\
$m \leftarrow \textrm{deg}(b)$\\
$n \leftarrow \textrm{deg}(d)$\\
$a \leftarrow \sum_{i=0}^{m-1}{a[i]\cdot x^i}$\\
$c \leftarrow \sum_{i=0}^{n-1}{c[i]\cdot x^i}$\\
$r \leftarrow b\cdot c^\prime - 
c\cdot\textrm{quo}(b\cdot d^\prime,d)+d\cdot a$\\
{\bf for} $i$ {\bf from} 0 {\bf to} $m+n-1$ {\bf do}
\begin{addmargin}{1em}
$eqn[i] \leftarrow \textrm{coeff}(p,i)=\textrm{coeff}(r,i)$
\end{addmargin}
solve$(eqns,\{a[0],\ldots,a[m-1],c[0],\ldots,c[n-1]\})$\\
{\bf return}$(\frac{c}{d}+\int$poly\_part$+\int\frac{a}{b})$
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Rothstein/Trager Method}
\cite{Gedd92} p 499\\
{\bf procedure} LogarithmicPartIntegral$(a,b,x)$
\begin{addmargin}{1em}
-- Given a rational function $a/b$ in $x$ with deg$(a) <$ deg$(b)$,\\
-- $b$ monic and square-free, we calculate $\int\frac{a}{b}$\\
$R(z) \leftarrow \textrm{pp}_x(\textrm{res}_x(a-z\cdot b^\prime,b))$\\
$(r_1(z),\ldots,r_k(z)) \leftarrow \textrm{factors}(R(z))$\\
integral $\leftarrow 0$\\
{\bf for} $i$ {\bf from} 1 {\bf to} $k$ {\bf do} \{
\begin{addmargin}{1em}
$d \leftarrow \textrm{deg}(r_i(z))$\\
{\bf if} $d=1$ {\bf then} \{
\begin{addmargin}{1em}
$c \leftarrow \textrm{solve}(r_i(z)=0,z)$\\
$v \leftarrow \textrm{GCD}(a-c\cdot b^\prime,b)$\\
$v \leftarrow v/\textrm{lcoeff}(v)$\\
integral $\leftarrow$ integral $+c\cdot\textrm{log}(v)$ \}
\end{addmargin}
{\bf else} \{
\begin{addmargin}{1em}
-- Need to do GCD over algebraic number field\\
$v \leftarrow \textrm{GCD}(a-\alpha\cdot b^\prime,b)$\\
$v \leftarrow v/\textrm{lcoeff}(v)$\\
--\quad\quad\quad (where $\alpha - \textrm{RootOf}(r_i(z))$)\\
{\bf if} $d=2$ {\bf then} \{
\begin{addmargin}{1em}
-- Give answer in terms of radicals\\
$c \leftarrow \textrm{solve}(r_i(z)=0,z)$\\
{\bf for} $j$ {\bf from} 1 {\bf to} 2 {\bf do} \{
\begin{addmargin}{1em}
$v[j] \leftarrow \textrm{substitute}(\alpha=c[j],v)$\\
integral $\leftarrow$ integral $+c[j]\cdot\textrm{log}(v[j])$\}\}
\end{addmargin}
\end{addmargin}
{\bf else} \{
\begin{addmargin}{1em}
-- Need answer in RootOf notation\\
{\bf for} $j$ {\bf from} 1 {\bf to} $d$ {\bf do} \{
\begin{addmargin}{1em}
$v[j] \leftarrow \textrm{substutite}(\alpha=c[j],v)$\\
integral $\leftarrow$ integral$+ c[j]\cdot\textrm{log}(v[j])$\\
--\quad (where $c[j]=\textrm{RootOf}(r_i(z))$) \} \} \} \}
\end{addmargin}
\end{addmargin}
\end{addmargin}
\end{addmargin}
{\bf return}(integral)
\end{addmargin}
{\bf end}

\subsection{Background}

\subsection{Example}

\chapter{Lazard/Rioboo/Trager Improvement}
\cite{Gedd92} p 506\\
{\bf procedure} LogarithmicPartIntegral$(a,b,x)$
\begin{addmargin}{1em}
-- Given a rational function $a/b$ in $x$, with deg($a$) $<$ deg($b$)\\
-- $b$ monic and square-free, we calculate $\int a/b$\\
-- Calculate (via the subresultant algorithm)\\
$R(z) = \textrm{res}_x(a-z\cdot b^\prime,b)$\\
$S_i(x,z) =$ remainder of degree $i$ in $x$ in this computation\\
$(R_1(x),\ldots,R_k(z)) \leftarrow \textrm{SquareFree}(R(z))$\\
-- Process nontrivial square-free factors in $R(z)$\\
integral $\leftarrow 0$\\
{\bf for} $i$ {\bf from} 1 {\bf to} $k$ {\bf with} $R_i(z)\ne 1$ {\bf do} \{
\begin{addmargin}{1em}
-- Normalize to make results monic\\
$w(z) = \textrm{lcoeff}_x(S_i(x,z))$\\
$EEA(w(z),R_i(z); s(z),t(z))$\\
$S_i(x,z)= \textrm{pp}_z(\textrm{rem}(s(z)\cdot S_i(x,z),R_i(z)))$\\
-- Convert the $S_i(x,c)$ for $c$ a root of $R_i(z)$ into simpler form\\
-- (see LogarithmicPartIntegral on \cite{Gedd92} p 499)\\
$(r_{i,1},\ldots,r_{i,k_i}) \leftarrow \textrm{factors}(R_i(z))$\\
{\bf for} $j$ {\bf from} 1 {\bf to} $k_i$ {\bf do} \{
\begin{addmargin}{1em}
$d_j \leftarrow \textrm{deg}_z(r_{i,j}(z))$\\
{\bf if} $d_j=1$ {\bf then} \{
\begin{addmargin}{1em}
$c \leftarrow \textrm{solve}(r_{i,j}(z)=0,z)$\\
integral $\leftarrow$ integral$+c\cdot \textrm{log}(S_i(x,c))\}$
\end{addmargin}
{\bf elseif} $d_j=2$ {\bf then} \{ -- Give answers in terms of radicals\\
\begin{addmargin}{1em}
$c \leftarrow \textrm{solve}(r_{i,j}(z)=0,z)$\\
{\bf for} $n$ {\bf from} 1 {\bf to} 2 {\bf do} \{
\begin{addmargin}{1em}
integral $\leftarrow$ integral$+c[n]\cdot \textrm{log}(S_i(x,c[n]))$ \}\}
\end{addmargin}
\end{addmargin}
{\bf else} \{ -- need answer in RootOf notatin
\begin{addmargin}{1em}
{\bf for} $n$ {\bf from} 1 {\bf to} $d_j$ {\bf do} \{
\begin{addmargin}{1em}
integral $\leftarrow$ integral+$c[n]\cdot\textrm{log}(S_i(x,c[n]))$\\
--\quad (where $c[n]=\textrm{RootOf}(r_{i,j}(z)))$ \}\}\}\}
\end{addmargin}
\end{addmargin}
\end{addmargin}
\end{addmargin}
{\bf return}(integral)
\end{addmargin}
{\bf end}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\bibliographystyle{axiom}
\bibliography{axiom}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\cleardoublepage
\phantomsection
\addcontentsline{toc}{chapter}{Index}
\printindex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}
